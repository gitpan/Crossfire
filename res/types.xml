<?xml version="1.0" standalone="no" ?>
<!--
######################################################################
# types.xml - This is the definitions-file for all the different     #
# Crossfire object types and their attributes.                       #
#                                                                    #
# The server code of the Crossfire game is always changing and       #
# evolving. From time to time, object-attributes change in purpose,  #
# or new ones are created.                                           #
# Therefore, it is important that an Editor is flexible and          #
# easy to "upgrade" to handle such new features. That's why the      #
# CFJavaEditor reads the type-definitions from this xml file.        #
#                                                                    #
# If you encounter bugs, typos or missing entries in the LATEST      #
# VERSION of this file - Don't hesitate to improve it, contact me    #
# and eventually send the improved file to me: <red.blaze@gmx.net>.  #
# I will put it into the "official version" of the CFJavaEditor      #
# and all fellow Crossfire-Map-Makers can benefit from your work!    #
#                                                                    #
# IMPORTANT: Make a backup copy of this file before you start        #
# to modify it!                                                      #
#                                                                    #
# New types must be inserted maintaining the alphabetical order.     #
#                                                                    #
# about the 'type' elements:                                         #
#                                                                    #
# <type number="15" name="Type Name">                                #
# <import_type name="Type Name" />   import attributes of this type  #
# <required>                                                         #
#    list of required attributes to identifying this type            #
# </required>                                                        #
# <ignore>                                                           #
#    list of attributes not to import from default_type              #
# </ignore>                                                          #
# <description><![CDATA[                                             #
#   Description of this type. ]]>                                    #
# </description>                                                     #
# <use><![CDATA[                                                     #
#   How to use this type. ]]>                                        #
# </use>                                                             #
# ... attributes ...                                                 #
# </type>                                                            #
#                                                                    #
# about the 'attribute' type: <attribute ... type="XXX" >            #
#                                                                    #
# bool         - This attribute can only be set to '1' or '0'        #
# int          - This attribute contains a decimal number            #
# float        - This attr. contains a floating point number         #
# string       - This attribute contains a string                    #
# text         - This attribute contains a text ("text" can have     #
#                linebreaks, unlike "string")                        #
# fixed        - This attribute is always set to a fixed 'value'     #
#                (There is no user-input for this attribute)         #
# spell        - This attribute contains a spell. The mapmaker can   #
#                choose spells from a combo box.                     #
# nz_spell     - works just like 'spell', except that the            #
#                spell-value zero is always interpreted as <none>,   #
#                never as "magic bullet"                             #
# bool_special - Like bool, but with customized true/false values    #
# treasurelist - CF treasure list (see "treasures" file)             #
# list_LISTNAME       - list, must be defined as a <list> element    #
# bitmask_BITMASKNAME - bitmask, must be defined as a <bitmask>      #
#                       element                                      #
#                                                                    #
# Created by Andreas Vogl.                                           #
######################################################################
-->
<!DOCTYPE types [
  <!ELEMENT types ((bitmask | list | ignore_list)*, default_type, ignore_list*, type+)>

  <!ELEMENT bitmask (entry*)>
  <!ATTLIST bitmask name CDATA #REQUIRED>

  <!ELEMENT list (entry*)>
  <!ATTLIST list name CDATA #REQUIRED>

  <!ELEMENT entry EMPTY>
  <!ATTLIST entry bit   CDATA #IMPLIED
                  value CDATA #IMPLIED
                  name  CDATA #REQUIRED>

  <!ELEMENT ignore_list (attribute* | EMPTY)>
  <!ATTLIST ignore_list name CDATA #REQUIRED>

  <!ELEMENT default_type (attribute*)>

  <!ELEMENT type (import_type?,required?,ignore?,description?,use?,(section | attribute)*)>
  <!ATTLIST type name   CDATA #REQUIRED
                 number CDATA #REQUIRED>

  <!ELEMENT description (#PCDATA)>
  <!ELEMENT use (#PCDATA)>

  <!ELEMENT import_type EMPTY>
  <!ATTLIST import_type name CDATA #REQUIRED>

  <!ELEMENT required (attribute+)>
  <!ELEMENT ignore (attribute*,ignore_list*)>

  <!ELEMENT section (attribute+)>
  <!ATTLIST section name CDATA #REQUIRED>

  <!ELEMENT attribute (#PCDATA)>
  <!ATTLIST attribute type       CDATA #IMPLIED
                      arch       CDATA #IMPLIED
                      arch_begin CDATA #IMPLIED
                      arch_end   CDATA #IMPLIED
                      editor     CDATA #IMPLIED
                      value      CDATA #IMPLIED
                      length     CDATA #IMPLIED
                      true       CDATA #IMPLIED
                      false      CDATA #IMPLIED>

  <!ENTITY move_on "
     <attribute arch='move_on' editor='movement type' type='movement_type'>
        Which movement types automatically (as opposed to manually) activate this object.
     </attribute>
  ">
  <!ENTITY move_off "
     <attribute arch='move_off' editor='movement type' type='movement_type'>
        Which movement types deactivate this object (e.g. button).
     </attribute>
  ">
  <!ENTITY move_type "
     <attribute arch='move_type' editor='movement type' type='movement_type'>
        Determines which kinds of movement this object can use (e.g. for monsters)
        or grants (e.g. for amulets).
     </attribute>
  ">
  <!ENTITY movement_types_terrain "
     <attribute arch='move_block' editor='blocked movement' type='movement_type'>
       Objects using these movement types cannot move over this space.
     </attribute>
     <attribute arch='move_allow' editor='allowed movement' type='movement_type'>
       Objects using these movement types are allowed to move over this space. Takes
       precedence over 'blocked movements'.
     </attribute>
     <attribute arch='move_slow' editor='slowed movement' type='movement_type'>
       The types of movement that should by slowed down by the 'slow movement penalty'.
     </attribute>
     <attribute arch='move_slow_penalty' editor='slow movement penalty' type='int'>
       If &lt;slow movement&gt; is set to a value greater zero, all
       creatures matching 'slow move' will be slower than normal on this spot.

       &lt;slow movement&gt; 1  - rough terrain
       &lt;slow movement&gt; 2  - very rough terrain
       ...
       &lt;slow movement&gt; 5  - default for deep swamp
       ...
       &lt;slow movement&gt; 7  - spider web (sticky as hell)
     </attribute>
  ">
  <!ENTITY speed_left "
     <attribute arch='speed_left' editor='speed left' type='float'>
        The speed left to the object. On every tick, if this value is higher
        than 0, the object acts/triggers/moves etc. and the value gets
        decremented by 1. Otherwise, it is incremented by &lt;speed&gt; on
        every tick.
     </attribute>
  ">
  <!ENTITY activate_on "
     <attribute arch='activate_on_push' editor='Activate on push' type='bool'>
       Whether the teleporter should only be activated on push.
     </attribute>
     <attribute arch='activate_on_release' editor='Activate on release' type='bool'>
       Whether the teleporter should only be activated on release.
     </attribute>
  ">

  <!ENTITY resistances_flesh_desc "
    Resistances on flesh items make them more durable against spellcraft
    of the appropriate kind. It also allows dragon players to eventually gain
    resistance by eating it. Usually resistance should only be set for flesh
    items in a monster's inventory.
  ">

  <!ENTITY resistances_flesh_section "
   <section name='resistance'>
     <attribute arch='resist_physical' editor='resist physical &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_magic' editor='resist magic &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_fire' editor='resist fire &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_electricity' editor='resist electricity &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_cold' editor='resist cold &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_confusion' editor='resist confusion &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_acid' editor='resist acid &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_drain' editor='resist draining &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_weaponmagic' editor='resist weaponmagic &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_ghosthit' editor='resist ghosthit &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_poison' editor='resist poison &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_slow' editor='resist slow &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_paralyze' editor='resist paralyze &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_fear' editor='resist fear &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_deplete' editor='resist depletion &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_death' editor='resist death-attack &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_chaos' editor='resist chaos &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
     <attribute arch='resist_blind' editor='resist blinding &#x25;' length='15' type='int'>
       &resistances_flesh_desc;
     </attribute>
   </section>
  ">

  <!ENTITY resistances_basic "
   <section name='resistance'>
     <attribute arch='resist_physical' editor='resist physical &#x25;' length='15' type='int'/>
     <attribute arch='resist_magic' editor='resist magic &#x25;' length='15' type='int'/>
     <attribute arch='resist_fire' editor='resist fire &#x25;' length='15' type='int'/>
     <attribute arch='resist_electricity' editor='resist electricity &#x25;' length='15' type='int'/>
     <attribute arch='resist_cold' editor='resist cold &#x25;' length='15' type='int'/>
     <attribute arch='resist_confusion' editor='resist confusion &#x25;' length='15' type='int'/>
     <attribute arch='resist_acid' editor='resist acid &#x25;' length='15' type='int'/>
     <attribute arch='resist_drain' editor='resist draining &#x25;' length='15' type='int'/>
     <attribute arch='resist_weaponmagic' editor='resist weaponmagic &#x25;' length='15' type='int'/>
     <attribute arch='resist_ghosthit' editor='resist ghosthit &#x25;' length='15' type='int'/>
     <attribute arch='resist_poison' editor='resist poison &#x25;' length='15' type='int'/>
     <attribute arch='resist_slow' editor='resist slow &#x25;' length='15' type='int'/>
     <attribute arch='resist_paralyze' editor='resist paralyze &#x25;' length='15' type='int'/>
     <attribute arch='resist_fear' editor='resist fear &#x25;' length='15' type='int'/>
     <attribute arch='resist_deplete' editor='resist depletion &#x25;' length='15' type='int'/>
     <attribute arch='resist_death' editor='resist death-attack &#x25;' length='15' type='int'/>
     <attribute arch='resist_chaos' editor='resist chaos &#x25;' length='15' type='int'/>
     <attribute arch='resist_blind' editor='resist blinding &#x25;' length='15' type='int'/>
     <attribute arch='resist_holyword' editor='resist holy power &#x25;' length='15' type='int'/>
     <attribute arch='resist_godpower' editor='resist godpower &#x25;' length='15' type='int'/>
   </section>
  ">

   <!ENTITY player_stat_desc "
    The player's strentgh will rise/fall by the given value for permanent
    (of course there is an upper limit). Generally there shouldn't be stat
    potions granting more than one stat. Cursed potions will subtract the
    stats if positive.
   ">

   <!ENTITY player_res_desc "
    The player's resistance to physical will rise by this value in percent
    (range -100 till +100). The effect is only temporare, and it does NOT
    add on the values from the player's equipment.
    Cursed potions will make negative resistance.. very nasty in combat!
   ">

   <!ENTITY player_stat_resist_sections "
      <section name='stats'>
        <attribute arch='Str' editor='strength' type='int'>
          &player_stat_desc;
        </attribute>
        <attribute arch='Dex' editor='dexterity' type='int'>
          &player_stat_desc;
        </attribute>
        <attribute arch='Con' editor='constitution' type='int'>
          &player_stat_desc;
        </attribute>
        <attribute arch='Int' editor='intelligence' type='int'>
          &player_stat_desc;
        </attribute>
        <attribute arch='Pow' editor='power' type='int'>
          &player_stat_desc;
        </attribute>
        <attribute arch='Wis' editor='wisdom' type='int'>
          &player_stat_desc;
        </attribute>
        <attribute arch='Cha' editor='charisma' type='int'>
          &player_stat_desc;
        </attribute>
      </section>
      <section name='resistance'>
        <attribute arch='resist_physical' editor='resist physical &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_magic' editor='resist magic &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_fire' editor='resist fire &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_electricity' editor='resist electricity &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_cold' editor='resist cold &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_acid' editor='resist acid &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_confusion' editor='resist confusion &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_weaponmagic' editor='resist weaponmagic &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_ghosthit' editor='resist ghosthit &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_slow' editor='resist slow &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_fear' editor='resist fear &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_death' editor='resist death-attack &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_chaos' editor='resist chaos &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_blind' editor='resist blinding &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_holyword' editor='resist holy power &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_godpower' editor='resist godpower &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_paralyze' editor='resist paralyze &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_drain' editor='resist draining &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_deplete' editor='resist depletion &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
        <attribute arch='resist_poison' editor='resist poison &#x25;' length='15' type='int'>
          &player_res_desc;
        </attribute>
      </section>
   ">

]>

<types>

<!--###################### bitmask definitions ######################-->

<bitmask name="attacktype">
  <entry bit="0" name="Physical" />
  <entry bit="1" name="Magical" />
  <entry bit="2" name="Fire" />
  <entry bit="3" name="Electricity" />
  <entry bit="4" name="Cold" />
  <entry bit="5" name="Confusion" />
  <entry bit="6" name="Acid" />
  <entry bit="7" name="Drain" />
  <entry bit="8" name="Weaponmagic" />
  <entry bit="9" name="Ghosthit" />
  <entry bit="10" name="Poison" />
  <entry bit="11" name="Slow" />
  <entry bit="12" name="Paralyze" />
  <entry bit="13" name="Turn Undead" />
  <entry bit="14" name="Fear" />
  <entry bit="15" name="Cancellation" />
  <entry bit="16" name="Depletion" />
  <entry bit="17" name="Death" />
  <entry bit="18" name="Chaos" />
  <entry bit="19" name="Counterspell" />
  <entry bit="20" name="God Power" />
  <entry bit="21" name="Holy Power" />
  <entry bit="22" name="Blinding" />
</bitmask>

<bitmask name="material">
  <entry bit="0" name="Paper" />
  <entry bit="1" name="Iron" />
  <entry bit="2" name="Glass" />
  <entry bit="3" name="Leather" />
  <entry bit="4" name="Wood" />
  <entry bit="5" name="Organics" />
  <entry bit="6" name="Stone" />
  <entry bit="7" name="Cloth" />
  <entry bit="8" name="Adamantite" />
  <entry bit="9" name="Liquid" />
  <entry bit="10" name="Soft Metal" />
  <entry bit="11" name="Bone" />
  <entry bit="12" name="Ice" />
  <entry bit="13" name="(supress name on display)" />

</bitmask>

<bitmask name="spellpath">
  <entry bit="0" name="Protection" />
  <entry bit="1" name="Fire" />
  <entry bit="2" name="Frost" />
  <entry bit="3" name="Electricity" />
  <entry bit="4" name="Missiles" />
  <entry bit="5" name="Self" />
  <entry bit="6" name="Summoning" />
  <entry bit="7" name="Abjuration" />
  <entry bit="8" name="Restoration" />
  <entry bit="9" name="Detonation" />
  <entry bit="10" name="Mind" />
  <entry bit="11" name="Creation" />
  <entry bit="12" name="Teleportation" />
  <entry bit="13" name="Information" />
  <entry bit="14" name="Transmutation" />
  <entry bit="15" name="Transferrence" />
  <entry bit="16" name="Turning" />
  <entry bit="17" name="Wounding" />
  <entry bit="18" name="Death" />
  <entry bit="19" name="Light" />
</bitmask>

<bitmask name="will_apply">
  <entry bit="0" name="Apply Handles" />
  <entry bit="1" name="Open Chests" />
  <entry bit="2" name="Break Walls" />
  <entry bit="3" name="Open Doors" />
</bitmask>

<bitmask name="pick_up">
  <entry bit="0" name="Nothing" />
  <entry bit="1" name="Wealth" />
  <entry bit="2" name="Food" />
  <entry bit="3" name="Weapons" />
  <entry bit="4" name="Armour" />
  <entry bit="5" name="Inverse" />
  <entry bit="6" name="All" />
</bitmask>

<bitmask name="movement_type">
  <entry bit="0" name="Walk" />
  <entry bit="1" name="Fly Low" />
  <entry bit="2" name="Fly High" />
  <entry bit="3" name="Swim" />
  <entry bit="4" name="Boat" />
  <entry bit="16" name="Other" />
</bitmask>

<!--###################### list definitions ######################-->

<list name="direction">
  <entry value="0" name="&lt;none&gt;" />
  <entry value="1" name="north" />
  <entry value="2" name="northeast" />
  <entry value="3" name="east" />
  <entry value="4" name="southeast" />
  <entry value="5" name="south" />
  <entry value="6" name="southwest" />
  <entry value="7" name="west" />
  <entry value="8" name="northwest" />
</list>

<list name="mood">
  <entry value="0" name="furious" />
  <entry value="1" name="angry" />
  <entry value="2" name="calm" />
  <entry value="3" name="sleep" />
  <entry value="4" name="charm" />
</list>

<list name="potion_effect">
  <entry value="0" name="&lt;none&gt;" />
  <entry value="65536" name="life restoration" />
  <entry value="1048576" name="improvement" />
</list>

<list name="weapon_type">
  <entry value="0" name="&lt;unknown&gt;" />
  <entry value="1" name="sword" />
  <entry value="2" name="arrows" />
  <entry value="3" name="axe" />
  <entry value="4" name="katana" />
  <entry value="5" name="knife, dagger" />
  <entry value="6" name="whip, chain" />
  <entry value="7" name="hammer, flail" />
  <entry value="8" name="club, stick" />
</list>

<list name="skill_type">
  <entry value="1" name="lockpicking" />
  <entry value="2" name="hiding" />
  <entry value="3" name="smithery" />
  <entry value="4" name="bowyer" />
  <entry value="5" name="jeweler" />
  <entry value="6" name="alchemy" />
  <entry value="7" name="stealing" />
  <entry value="8" name="literacy" />
  <entry value="9" name="bargaining" />
  <entry value="10" name="jumping" />
  <entry value="11" name="detect magic" />
  <entry value="12" name="oratory" />
  <entry value="13" name="singing" />
  <entry value="14" name="detect curse" />
  <entry value="15" name="find traps" />
  <entry value="16" name="mediatation" />
  <entry value="17" name="punching" />
  <entry value="18" name="flame touch" />
  <entry value="19" name="karate" />
  <entry value="20" name="climbing" />
  <entry value="21" name="woodsman" />
  <entry value="22" name="inscription" />
  <entry value="23" name="one handed weapons" />
  <entry value="24" name="missile weapons" />
  <entry value="25" name="throwing" />
  <entry value="26" name="use magic item" />
  <entry value="27" name="disarm traps" />
  <entry value="28" name="set traps" />
  <entry value="29" name="thaumaturgy" />
  <entry value="30" name="praying" />
  <entry value="31" name="clawing" />
  <entry value="32" name="levitation" />
  <entry value="33" name="summoning" />
  <entry value="34" name="pyromancy" />
  <entry value="35" name="evocation" />
  <entry value="36" name="sorcery" />
  <entry value="37" name="two handed weapons" />
</list>

<list name="spell_type">
  <entry value="1" name="raise dead" />
  <entry value="2" name="rune" />
  <entry value="3" name="make mark" />
  <entry value="4" name="bolt" />
  <entry value="5" name="bullet" />
  <entry value="6" name="explosion" />
  <entry value="7" name="cone" />
  <entry value="8" name="bomb" />
  <entry value="9" name="wonder" />
  <entry value="10" name="smite" />
  <entry value="11" name="magic missile" />
  <entry value="12" name="summon golem" />
  <entry value="13" name="dimension door" />
  <entry value="14" name="magic mapping" />
  <entry value="15" name="magic wall" />
  <entry value="16" name="destruction" />
  <entry value="17" name="perceive self" />
  <entry value="18" name="word of recall" />
  <entry value="19" name="invisible" />
  <entry value="20" name="probe" />
  <entry value="21" name="healing" />
  <entry value="22" name="create food" />
  <entry value="23" name="earth to dust" />
  <entry value="24" name="change ability" />
  <entry value="25" name="bless" />
  <entry value="26" name="curse" />
  <entry value="27" name="summon monster" />
  <entry value="28" name="recharge" />
  <entry value="29" name="polymorph" />
  <entry value="30" name="alchemy" />
  <entry value="31" name="remove curse" />
  <entry value="32" name="identify" />
  <entry value="33" name="detection" />
  <entry value="34" name="mood change" />
  <entry value="35" name="moving ball" />
  <entry value="36" name="swarm" />
  <entry value="37" name="charge mana" />
  <entry value="38" name="dispel rune" />
  <entry value="39" name="create missile" />
  <entry value="40" name="consecrate" />
  <entry value="41" name="animate weapon" />
  <entry value="42" name="light" />
  <entry value="43" name="change map light" />
  <entry value="44" name="faery fire" />
  <entry value="45" name="disease" />
  <entry value="46" name="aura" />
  <entry value="47" name="town portal" />
</list>

<list name="event_type">
  <entry value="0" name="none" />
  <entry value="1" name="apply" />
  <entry value="2" name="attack" />
  <entry value="3" name="death" />
  <entry value="4" name="drop" />
  <entry value="5" name="pickup" />
  <entry value="6" name="say" />
  <entry value="7" name="stop" />
  <entry value="8" name="time" />
  <entry value="9" name="throw" />
  <entry value="10" name="trigger" />
  <entry value="11" name="close" />
  <entry value="12" name="timer" />
  <entry value="28" name="move" />
  <entry value="41" name="drop_on" />
</list>

<list name="attack_movement_bits_0_3">
   <entry value="0" name="default" />
   <entry value="1" name="attack from distance" />
   <entry value="2" name="run away" />
   <entry value="3" name="hit and run" />
   <entry value="4" name="wait, then hit, then move" />
   <entry value="5" name="rush blindly" />
   <entry value="6" name="always run" />
   <entry value="7" name="attack from distance if hit" />
   <entry value="8" name="do not approach" />
</list>

<list name="attack_movement_bits_4_7">
   <entry value="0" name="none" />
   <entry value="16" name="pet" />
   <entry value="32" name="small circle" />
   <entry value="48" name="large circle" />
   <entry value="64" name="small horizontal" />
   <entry value="80" name="large horizontal" />
   <entry value="96" name="random direction" />
   <entry value="112" name="random movement" />
   <entry value="128" name="small vertical" />
   <entry value="144" name="large vertical" />
</list>

<!--###################### default attributes ######################-->

<!--
  The attributes of the default_type get added to all other types by default.
  Every type can have an 'ignore' element however, which is used to specify
  default attributes *not* to inherit.
  -->
<default_type>
  <attribute arch="name" editor="name" type="string">
    This is the name of the object, displayed to the player.
  </attribute>
  <attribute arch="name_pl" editor="plural name" type="string">
    This is the plural name of the object. A plural name must be set for
    all items that can be picked up and collected by the player.
  </attribute>
  <attribute arch="title" editor="title" type="string">
    This is the object's title. Once an object is identified the title is
    attached to the name. Typical titles are "of Mostrai", "of xray vision" etc.
  </attribute>
  <attribute arch="face" editor="image" type="string">
    The image-name defines what image is displayed for this object in-game.
  </attribute>
  <attribute arch="nrof" editor="number" type="int">
    This value determines the number of objects in one stack (for example:
    100 goldcoins =&gt; "number = 100"). You should set this at least to one, for
    any pickable object - otherwise it won't be mergeable into a stack.
  </attribute>
  <attribute arch="weight" editor="weight" type="int">
    This value defines the object's weight in grams (1000g is 1kg). Objects with
    zero weight are not pickable for players. Still, set the "non-pickable"-flag
    for explicitly non-pickable objects (hey, this is opensource.. you
    never know ;) ).
  </attribute>
  <attribute arch="value" editor="value" type="int">
    Determines the value of the object, in units of silver coins (one
    platinum coin == 50 silver coins). Value for buying/selling will be
    further modified by various factors. Hence, testing values in-game is
    usually inevitable.
  </attribute>
  <attribute arch="glow_radius" editor="glow radius" type="int">
    If &lt;glow radius&gt; is set to a value greater zero, the object
    appears lit up on dark maps. &lt;glow radius&gt; can be a value
    between 0 and 4, the higher, the more light does the object emit.
  </attribute>
  <attribute arch="material" editor="material" type="bitmask_material">
    This bitmask-value informs the player of which material(s) the
    object consists. Material does also affect how likely the object
    can be destroyed by hazardous spell-effects.
  </attribute>
  <attribute arch="no_pick" editor="non-pickable" type="bool">
    If set, the object cannot be picked up (Neither by players nor monsters).
  </attribute>
  <attribute arch="invisible" editor="invisible" type="bool">
    Generally makes the object invisible. Depending on the object-type,
    some can be made visible by the show_invisible spell. If in doubt, test it.
    Putting an invisible object under the floor always prevents it from being
    shown.
  </attribute>
  <attribute arch="blocksview" editor="block view" type="bool">
    If an item is set to block view, players (and monsters) cannot
    see byond it unless they cross it or manage to stand ontop.
  </attribute>
  <attribute arch="identified" editor="identified" type="bool">
    If an item is identified, the player has full knowledge about it.
  </attribute>
  <attribute arch="unpaid" editor="unpaid" type="bool">
    An &lt;unpaid&gt; item cannot be used unless a player carried it over
    a shop mat, paying the demanded price. Setting this flag makes sense
    only for pickable items inside shops.
  </attribute>
  <attribute arch="sound" editor="sound" type="string">
    The sound this objects makes on a map. Enter either a sound alias from
    arch/res/sound.conf.res or a path. If you enter &lt;path&gt; in this
    field it will point to sound/&lt;path&gt;.ext
  </attribute>
  <attribute arch="sound_destroy" editor="destroy sound" type="string">
    The sound this objects makes when it is destroyed. Enter either a sound alias from
    arch/res/sound.conf.res or a path. If you enter &lt;path&gt; in this
    field it will point to sound/&lt;path&gt;.ext
  </attribute>
</default_type>

<!-- This ignorelist is for all system objects which are non pickable
     and invisible. They don't interact with players at all. -->
<ignore_list name="system_object">
  <attribute arch="value" />
  <attribute arch="nrof" />
  <attribute arch="weight" />
  <attribute arch="name_pl" />
  <attribute arch="material" />
  <attribute arch="no_pick" />
  <attribute arch="unpaid" />
  <attribute arch="title" />
  <attribute arch="glow_radius" />
  <attribute arch="identified" />
  <attribute arch="blocksview" />
  <attribute arch="invisible" />
</ignore_list>

<!-- This ignorelist is for non-pickable objects. They can be seen by
     the player, but don't have values like material or weight. -->
<ignore_list name="non_pickable">
  <attribute arch="value" />
  <attribute arch="nrof" />
  <attribute arch="weight" />
  <attribute arch="name_pl" />
  <attribute arch="material" />
  <attribute arch="no_pick" />
  <attribute arch="unpaid" />
  <attribute arch="title" />
  <attribute arch="identified" />
</ignore_list>

<!--####################################################################-->
<type number="0" name="Misc">
  <required>
    <!-- this is a special case: The "misc" type with type number 0 is
         the fallback for all types which don't match any other defined types.
         The required attribute "misc x" prevents that it gets confused with
         other types like "monster & npc" which also have type number 0. -->
    <attribute arch="misc" value="x" />
  </required>
  &movement_types_terrain;
  <attribute arch="cursed" editor="cursed" type="bool">
    Curses can have various effects: On equipment and food,
    they generally harm the player in some way.
  </attribute>
  <attribute arch="damned" editor="damned" type="bool">
    A damned item/floor on the ground makes it impossible for players
    to use prayers on that spot. It also prevents players from saving.
    Damnation on equipment works similar to a curse.
  </attribute>
  <attribute arch="unique" editor="unique item" type="bool">
    Unique items exist only one time on a server. If the item
    is taken, lost or destroyed - it's gone for good.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may describe the object.
  </attribute>
</type>

<!--####################################################################-->
<type number="110" name="Ability">
  <ignore>
    <ignore_list name="system_object" />
  </ignore>
  <description><![CDATA[
    Abilities are to be put in a monster's inventory. They grant monsters the
    knowledge to cast spells. Spells from abilities are usually magical in
    nature, thus adding magic attacktype to the spell-damage they produce.
    <br><br>
    A particularly nice feature of abilities is that they can hold two
    spells: One for short range- and one for long range use.
    \n\n
    You should know that spellcasting monsters receive abilities via
    &lt;treasurelist&gt;. ]]>
  </description>
  <use><![CDATA[
    If you want to create "customized" spellcasting monsters, you
    should use abilities (rather than spellbooks/wands or something).
    The long/short-range spell feature can make boss-monsters more
    interesting and challenging.
    <br><br>
    You should keep in mind that magic abilities allow players
    to get better resistance. You can turn off the magic part to
    make the spells more dangerous. However, this really shouldn't
    be neccessary unless you work on very high level maps.
    And what fun is a magic resistance cloak when it has no effect? ]]>
  </use>
  <attribute arch="invisible" value="1" type="fixed" />
  <attribute arch="no_drop" value="1" type="fixed" />
  <attribute arch="sp" editor="short range spell" type="spell">
    The monster will use the specified &lt;short range spell&gt;
    when the player is within 6-square radius (of the
    monster's head).
  </attribute>
  <attribute arch="hp" editor="long range spell" type="nz_spell">
    The monster will use the specified &lt;long range spell&gt;
    when the player is at least 6 squares away (from the
    monster's head).

    Setting a &lt;long range spell&gt; is optional. If unset, the
    &lt;short range spell&gt; gets used all the time.
  </attribute>
  <attribute arch="maxsp" editor="importance" type="int">
    Sometimes you'll want a monster to use one ability more than others.
    To achieve this, set the &lt;importance&gt; to a value greater than
    one. Abilities with this value zero/unset are counted to be of
    &lt;importance&gt; one.

    Example: A monster with "small fireball" of &lt;importance&gt; 3 and
    "paralyze" of &lt;importance&gt; 1 will averagely cast three out of four
    times the "small fireball".
  </attribute>
  <attribute arch="attacktype" editor="is magical" true="2" false="0" type="bool_special">
    This flag specifies whether the ability &lt;is magical&gt; in nature.
    If enabled, all spells produced by this ability will have magic
    attacktype added to the usual attacktypes.

    This should always be set for spell-like abilities. "Natural"
    abilities like a dragon's firebreath are an exception.
    Note that non-magical abilities are more dangerous because
    magic resistance does not protect from those.</attribute>
</type>

<!--####################################################################-->
<type number="18" name="Altar">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    When a player puts a defined number of certain items on the altar,
    then either a spell is casted (on the player) or a connector is
    triggered. If the latter is the case, the altar works only once.
    Either way, the sacrificed item disappears. ]]>
  </description>
  <attribute arch="no_pick" value="1" type="fixed" />
  &move_on;
  <attribute arch="slaying" editor="match item name" type="string">
    This string specifies the item that must be put on the altar to
    activate it. It can either be the name of an archetype, or directly
    the name of an object. Yet, titles are not recognized by altars.
    Remember to put a note somewhere, telling the player what he is
    expected to drop on the altar. (Often this is put in the altar's
    name: E.g. "drop 100 platinums")
  </attribute>
  <attribute arch="food" editor="drop amount" type="int">
    The drop amount specifies the amount of items (specified
    in &lt;match item name&gt;) that must be dropped to activate the altar.

    If &lt;match item name&gt; is set to "money", then the value of the
    sacrificed money must be equal to &lt;drop amount&gt; (ie, if food=200, then
    200 silver, 20 gold, or 4 platinum will all work.)

    Note that the maximum possible for &lt;drop amount&gt; is 32767.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    If a connection value is set, the altar will trigger all objects
    with the same value, when activated. This will only work once.
  </attribute>
  <attribute arch="sp" editor="spell" type="spell">
    When activated, the selected &lt;spell&gt; will be casted (once, on the
    player). This should work for any given spell. The altar will work
    infinitely in this way. Don't set both &lt;spell&gt; and &lt;connection&gt; for
    one altar.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="message" type="text">
    This text will be displayed to the player
    in the exact moment when the altar is activated.
  </attribute>
</type>

<!--####################################################################-->
<type number="31" name="Altar Trigger">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Altar_triggers work pretty much like normal altars
    (drop sacrifice -> connection activated), except for the fact that
    they reset after usage. Hence, altar_triggers can be used infinitely. ]]>
  </description>
  <use><![CDATA[
    Altar_triggers are very useful if you want to charge a price for...
    <UL>
    <LI> ...an item. -> Connect the altar_trigger (set "last_sp 1") to a creator.
    <LI> ...opening a gate. -> Connect the altar_trigger (set "last_sp 0") to the gate.
    <LI> ...information. -> Connect the altar_trigger (set "last_sp 1") to a magic_mouth.
    </UL>
    The big advantage over normal altars is the infinite usability
    of altar_triggers! If there are ten players on one server, they're
    quite grateful if things work more than once. =) ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="slaying" editor="match item name" type="string">
    This string specifies the item that must be put on the altar to
    activate it. It can either be the name of an archetype, or directly
    the name of an object. Yet, titles are not recognized by altars.
    Remember to put a note somewhere, telling the player what he is
    expected to drop on the altar. (Often this is put in the altar's
    name: E.g. "drop 100 platinums")
  </attribute>
  <attribute arch="food" editor="drop amount" type="int">
    The drop amount specifies the amount of items (specified
    in &lt;match item name&gt;) that must be dropped to activate the altar.

    If &lt;match item name&gt; is set to "money", then the value of the
    sacrificed money must be equal to &lt;drop amount&gt; (ie, if food=200, then
    200 silver, 20 gold, or 4 platinum will all work.)

    Note that the maximum possible for &lt;drop amount&gt; is 32767.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    If a connection value is set, the altar will trigger all objects
    with the same value, when activated. This will only work once.
  </attribute>
  <attribute arch="sp" editor="spell" type="spell">
    When activated, this &lt;spell&gt; will be casted (once, on the player).
    This should work for any given spell. The altar will work infinitely
    in this way. Don't set both &lt;spell&gt; and &lt;connection&gt; for one altar.
  </attribute>
  <attribute arch="exp" editor="reset time" type="int">
    Being activated, the altar will reset after &lt;reset time&gt; ticks.
    After reset, the altar is ready to be activated once again.
    The default &lt;reset time&gt; is 30.
  </attribute>
  <attribute arch="last_sp" editor="ignore reset" type="bool">
    If this attribute is enabled, the altar_trigger won't push the
    connected value by altar reset. Only ONCE by dropping the sacrifice.
    This is typically used when the altar is connected to a creator,
    e.g. for selling tickets.

    If this attribute is disabled (default), the altar_trigger
    will push the connected value TWICE per sacrifice: First by
    dropping sacrifice, second by reset. This mode is typically
    used for altars being connected to gates, resulting in the
    gate being opened and closed again.
  </attribute>
  &move_on;
  <attribute arch_begin="msg" arch_end="endmsg" editor="message" type="text">
    This text will be displayed to the player
    in the exact moment when the altar is activated.
  </attribute>
</type>

<!--####################################################################-->
<type number="74" name="Skill Tool">
  <description><![CDATA[
    Wearing a skill tool will give the player the ability to use a skill.
  ]]>
  </description>
  <use><![CDATA[
    Feel free to assign resistancies and stats to a skill tools or change
    the skill that is given.
  ]]>
  </use>
  <attribute arch="skill" editor="skill name" type="string">
  This field describes which skill the player will be able to use wearing this item.
  </attribute>
  &player_stat_resist_sections;
</type>
<!--####################################################################-->
<type number="39" name="Amulet">
  <description><![CDATA[
    Wearing an amulet, the object's stats will directly be inherited to
    the player. Amulets are usually meant for protection and defense. ]]>
  </description>
  <use><![CDATA[
    Feel free to create your own special artifacts. However, it is very
    important that you keep your artifact in balance with existing maps. ]]>
  </use>
  <attribute arch="ac" editor="armour class" type="int">
    This value defines the amount of armour-class bonus for wearing
    this item. &lt;Armour class&gt; lessens the chance of being hit. Lower
    values are better. It should usually be set only for armour-like equipment.
  </attribute>
  <attribute arch="wc" editor="weapon class" type="int">
    The &lt;weapon class&gt; value adds to the overall weapon class of the wielder's
    melee attacks. Weapon class improves the chance of hitting the opponent.
    Weapon class is the "counterpiece" of &lt;armour class&gt;. It should usually
    be set only for weapon-like items. Lower values are better.
  </attribute>
  <attribute arch="item_power" editor="item power" type="int">
    The &lt;item power&gt; value measures how "powerful" an artifact is.
    Players will only be able to wear equipment with a certain total
    amount of &lt;item power&gt;, depending on their own level. This is the
    only way to prevent low level players to wear "undeserved" equipment
    (like gifts from other players or cheated items).

    It is very important to adjust the &lt;item power&gt; value carefully
    for every artifact you create! If zero/unset, the CF server will
    calculate a provisional value at runtime, but this is never
    going to be an accurate measurement of &lt;item power&gt;.
  </attribute>
  <attribute arch="damned" editor="damnation" type="bool">
    A damned piece of equipment cannot be unwielded unless the curse
    is removed. Removing damnations is a tick harder than removing curses.
  </attribute>
  <attribute arch="cursed" editor="curse" type="bool">
    A cursed piece of equipment cannot be unwielded
    unless the curse is removed.
  </attribute>
  <attribute arch="lifesave" editor="save life" type="bool">
    An item with this flag enabled will save the players life
    for one time: When the player is wearing this item and his
    health points reach zero, the item disappears, replenishing
    half of the player's health.

    An item with &lt;save life&gt; should not have
    any decent additional bonuses!
  </attribute>
  <attribute arch="unique" editor="unique item" type="bool">
    Unique items exist only one time on a server. If the item
    is taken, lost or destroyed - it's gone for good.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  <attribute arch="applied" editor="is applied" type="bool">
    If you put this item into the inventory of a monster, and
    you want the monster to use/wear the item - you must set
    &lt;is applied&gt;.
    Enabling this flag doesn't make any sense if the item
    is NOT in a monster's inventory.
  </attribute>
  &player_stat_resist_sections;
<section name="misc">
  <attribute arch="luck" editor="luck bonus" type="int">
    With positive luck bonus, the player is more likely to
    succeed in all sorts of things (spellcasting, praying,...).
    Unless the &lt;luck bonus&gt; is very high, the effect will be
    barely visible in-game. Luck bonus on one piece of equipment
    should never exceed 3, and such bonus should not be too
    frequently available.
  </attribute>
  <attribute arch="hp" editor="health regen." type="int">
    Positive &lt;health regen.&gt; bonus speeds up the
    player's healing process. Negative values slow it down.
  </attribute>
  <attribute arch="sp" editor="mana regen." type="int">
    Positive &lt;mana regen.&gt; bonus speeds up the
    player's mana regeneration. Negative values slow it down.
  </attribute>
  <attribute arch="grace" editor="grace regen." type="int">
    Positive &lt;grace regen.&gt; bonus speeds up the
    player's grace regeneration. Negative values slow it down.
    Since grace can be regenerated rather easy with praying,
    additional &lt;grace regen.&gt; bonus should be VERY RARE!!
  </attribute>
  <attribute arch="food" editor="food bonus" type="int">
    Positive &lt;food bonus&gt; slows down the player's digestion,
    thus he consumes less food. Negative values speed it up.

    Note that food is consumed not only for "being alive", but
    also for healing and mana-regeneration.
    &lt;food bonus&gt; only affects the amount of food consumed
    for "being alive". Hence, even with high &lt;food bonus&gt;,
    during a fight a player can run out of food quickly.
  </attribute>
  <attribute arch="xrays" editor="xray vision" type="bool">
    Xray vision allows the player to see through obstacles
    in a two-square-wide radius. This is extremely helpful and
    desirable, so don't give it away for cheap on equipment.
  </attribute>
  <attribute arch="stealth" editor="stealth" type="bool">
    Stealth allows the player to move silently.
    This comes to effect if a player turns himself
    invisible and tries to sneak around monsters.
    (At least that was the idea behind it)
  </attribute>
  <attribute arch="reflect_spell" editor="reflect spells" type="bool">
    If a player is wearing any piece of equipment with
    the ability to &lt;reflect spells&gt;, all kinds of
    spell-bullets and -beams will bounce off him.
    This works only about 90% of all times, to
    avoid players being completely immune to certain
    types of attacks.

    This is a very powerful ability and it
    shouldn't be handed out cheap!
  </attribute>
  <attribute arch="reflect_missile" editor="reflect missiles" type="bool">
    If a player is wearing any piece of equipment with
    the ability to &lt;reflect missiles&gt;, all kinds of
    projectiles (e.g. arrows, bolts, boulders) will
    bounce off him. This works only about 90% of all
    times, to avoid players being completely immune to
    certain types of attacks.
  </attribute>
  &move_type;
  <attribute arch="path_attuned" editor="attuned paths" type="bitmask_spellpath">
    Click on the &lt;attuned paths&gt; button to select spellpaths.
    The player will get attuned to the specified spellpaths
    while wearing this item.
  </attribute>
  <attribute arch="path_repelled" editor="repelled paths" type="bitmask_spellpath">
    Click on the &lt;repelled paths&gt; button to select spellpaths.
    The player will get repelled to the specified spellpaths
    while wearing this item.
  </attribute>
  <attribute arch="path_denied" editor="denied paths" type="bitmask_spellpath">
    Click on the &lt;denied paths&gt; button to select spellpaths.
    The specified spellpaths will be denied to the player
    while wearing this item.
  </attribute>
</section>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text describes the item's "story". Every decent artifact
    should have such a description.
  </attribute>
</type>

<!--####################################################################-->
<type number="58" name="Battleground">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Battleground is very special: In short, players can die on battleground
    without any death penalties. They don't loose or gain experience
    while on battleground. Acid, draining and depletion effects don't
    work either.
    When a player dies on battleground, he gets teleported to an exit
    location which is defined in the battleground object. ]]>
  </description>
  <use><![CDATA[
    Battleground is only meant for player vs. player duels. You can
    design combat arenas similiar to the one in scorn.<br>
    What should NEVER be done is placing battleground tiles in
    open dungeons or other free kinds of land.
    It must not be possible to gain significant treasure for fighting
    on battleground, because it bears no risk.<br><br>
    (Battleground will cease to work when the image or name is changed,
    or when it is placed beneath another floor tile.
    This is not a bug, it is there to prevent any attempts of placing
    "hidden" battleground tiles anywhere.) ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="is_floor" value="1" type="fixed" />
  <attribute arch="hp" editor="destination X" type="int">
    The exit destinations define the (x, y)-coordinates where players
    get teleported after they died on this battleground.
  </attribute>
  <attribute arch="sp" editor="destination Y" type="int">
    The exit destinations define the (x, y)-coordinates where players
    get teleported after they died on this battleground.
  </attribute>
</type>

<!--####################################################################-->
<type number="165" name="Safe ground (CF+)">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Safe ground is a special object that prevents any effects that might
    be harmful for the map, other players or items on the map.
    It blocks all magic and prayers, usage of alchemy, prevents potions
    from being used and blocks bombs from exploding. Note that altars that
    do cast spells still work.
    (This is a Crossfire+ feature, and might not work elsewhere)
  ]]>
  </description>
  <use><![CDATA[
    Safe ground can be used to prevents any means of burning
    or destroying the items in a shop. Put this object below all floor tiles
    in your map and your shop will be safe. It's generally useful for making
    areas where really no kind of spell should be invoked by a player.
  ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
</type>

<!--####################################################################-->
<type number="8" name="Book">
  <description><![CDATA[
    Applying a book, the containing message is displayed to the player. ]]>
  </description>
  <attribute arch="level" editor="literacy level" type="int">
    If this value is set to be greater than zero, the player needs a
    certain literacy level to succeed reading the book. The book can be
    read if: mental_level greater &lt;literacy level&gt; - 5. Adding level to a
    book can be a nice idea, personally I like it when a player needs
    more than his fighting skills to solve a quest. However, keep the
    booklevel at least below 15 because it is quite hard to gain high
    mental levels.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  <attribute arch="unique" editor="unique item" type="bool">
    Unique items exist only one time on a server. If the item
    is taken, lost or destroyed - it's gone for good.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="book content" type="text">
    This is the text that appears "written" in the book.
  </attribute>
  <attribute arch="slaying" editor="key string" type="string">
    This is the key string of the book. The key string is checked by an inventory checker.
    (This is used eg. for the gate/port passes in scorn)
  </attribute>
</type>

<!--####################################################################-->
<type number="99" name="Boots">
  <import_type name="Amulet" />
  <description><![CDATA[
    Wearing boots, the object's stats will directly be inherited to
    the player. Usually enhancing his speed, or granting some minor
    protection bonus. ]]>
  </description>
  <use><![CDATA[
    Feel free to create your own special artifacts. However, it is very
    important that you keep your artifact in balance with existing maps. ]]>
  </use>
  <attribute arch="exp" editor="speed bonus" type="int">
    Boots with &lt;speed bonus&gt; will increase the player's walking speed
    while worn. This kind of bonus is quite desirable for players of low-
    and medium level. High level players usually have fastest possible
    walking speed and thus don't need &lt;speed bonus&gt; anymore.
    Still, this bonus is good for nice artifacts - not everything has
    to be for highest level.
  </attribute>
  <attribute arch="magic" editor="magic bonus" type="int">
    &lt;magic bonus&gt; works just like ac, except that it can be improved by
    "scrolls of Enchant Armour" or reduced by acid. It is less useful
    than direct armour-class bonus on the boots.

    Important: &lt;magic bonus&gt; on boots has no effect if there is no
    &lt;armour class&gt; set. It only works in combination with &lt;armour class&gt;.
  </attribute>
</type>

<!--####################################################################-->
<type number="104" name="Bracers">
  <import_type name="Amulet" />
  <description><![CDATA[
    Bracers are armour-plates worn around the wrists.
    Wearing bracer, the object's stats will directly be inherited to
    the player. Usually enhancing his defense. ]]>
  </description>
  <use><![CDATA[
    Feel free to create your own special artifacts. However, it is very
    important that you keep your artifact in balance with existing maps. ]]>
  </use>
  <attribute arch="magic" editor="magic bonus" type="int">
    &lt;magic bonus&gt; works just like ac, except that it can be improved by
    "scrolls of Enchant Armour" or reduced by acid. It is less useful
    than direct armour-class bonus on the bracers.
  </attribute>
</type>

<!--####################################################################-->
<type number="16" name="Brestplate Armour">
  <import_type name="Amulet" />
  <description><![CDATA[
    Wearing an armour, the object's stats will directly be inherited to
    the player. Usually enhancing his defense. ]]>
  </description>
  <use><![CDATA[
    Feel free to create your own special artifacts. However, it is very
    important that you keep your artifact in balance with existing maps. ]]>
  </use>
  <attribute arch="last_heal" editor="spellpoint penalty" type="int">
    This poses a penalty to spell regeneration speed, for wearing the armour.
    The bigger the spellpoint penalty, the worse.
  </attribute>
  <attribute arch="last_sp" editor="slowdown penalty" type="int">
    Slowdown penalty reduces the player's walking speed when wearing the
    armour. Bigger values are worse - zero is best.
  </attribute>
  <attribute arch="magic" editor="magic bonus" type="int">
    &lt;magic bonus&gt; works just like ac, except that it can be improved by
    "scrolls of Enchant Armour" or reduced by acid. It is less useful
    than direct armour-class bonus on the armour.
  </attribute>
</type>

<!--####################################################################-->
<type number="92" name="Button">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    When a predefined amount of weigh is placed on a button, the
    &lt;connection&gt; value is triggered. In most cases this happens when a
    player or monster steps on it. When the button is "released", the
    &lt;connection&gt; value get's triggered a second time. ]]>
  </description>
  &move_on;
  &move_off;
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="weight" editor="press weight" type="int">
    The button is pressed (triggered), as soon as
    &lt;press weigh&gt; gram are placed ontop of it.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    Every time the button is pressed or released, all objects
    with the same &lt;connection&gt; value are activated.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may describe the item. You can use this
    message to explain the button's purpose to the player.
  </attribute>
</type>

<!--####################################################################-->
<type number="30" name="Button Trigger">
  <import_type name="Button" />
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Handle buttons are buttons which reset after a short period
    of time. Every time it is either applied or reset, the
    &lt;connection&gt; value is triggered. ]]>
  </description>
</type>

<!--####################################################################-->
<type number="37" name="Class Changer">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Class changer are used while creating a character. ]]>
  </description>
  <attribute arch="randomitems" editor="class items" type="treasurelist">
    This entry determines which initial items the character receives.
  </attribute>
<section name="stats">
  <attribute arch="Str" editor="strength" type="int">
    The player's strength will rise by the given value if he chooses this
    class. (Negative values make strength fall)
  </attribute>
  <attribute arch="Dex" editor="dexterity" type="int">
    The player's dexterity will rise by the given value if he chooses this
    class. (Negative values make dexterity fall)
  </attribute>
  <attribute arch="Con" editor="constitution" type="int">
    The player's constitution will rise by the given value if he chooses this
    class. (Negative values make constitution fall)
  </attribute>
  <attribute arch="Int" editor="intelligence" type="int">
    The player's intelligence will rise by the given value if he chooses this
    class. (Negative values make intelligence fall)
  </attribute>
  <attribute arch="Pow" editor="power" type="int">
    The player's power will rise by the given value if he chooses this
    class. (Negative values make power fall)
  </attribute>
  <attribute arch="Wis" editor="wisdom" type="int">
    The player's wisdom will rise by the given value if he chooses this
    class. (Negative values make wisdom fall)
  </attribute>
  <attribute arch="Cha" editor="charisma" type="int">
    The player's charisma will rise by the given value if he chooses this
    class. (Negative values make charisma fall)
  </attribute>
</section>
</type>

<!--####################################################################-->
<type number="87" name="Cloak">
  <import_type name="Amulet" />
  <description><![CDATA[
    Wearing a cloak, the object's stats will directly be inherited to
    the player. Cloaks usually add minor &lt;armour class&gt; and
    sometimes a bit of resistance. ]]>
  </description>
  <use><![CDATA[
    Feel free to create your own special artifacts. However, it is very
    important that you keep your artifact in balance with existing maps. ]]>
  </use>
  <attribute arch="magic" editor="magic bonus" type="int">
    &lt;magic bonus&gt; works just like ac, except that it can be improved by
    "scrolls of Enchant Armour" or reduced by acid. It is less useful
    than direct armour-class bonus on the cloak.

    Important: &lt;magic bonus&gt; on cloaks has no effect if there is no
    &lt;armour class&gt; set. It only works in combination with &lt;armour class&gt;.
  </attribute>
</type>

<!--####################################################################-->
<type number="9" name="Clock">
  <description><![CDATA[
    Applying a clock, the time is displayed to the player. ]]>
  </description>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may describe the item
  </attribute>
</type>

<!--####################################################################-->
<type number="122" name="Container">
  <description><![CDATA[
    A player can put (certain kinds of) items in the container.
    The overall weight of items is reduced when put inside a
    container, depending on the settings.
    <br><br>
    A special feature of containers is the "cauldron",
    capable of mixing alchemical receipes. ]]>
  </description>
  <use><![CDATA[
    Note on chests - There are two types of chests:
    <UL>
    <LI> First the random treasure chests - Those are NOT containers
         (but object type Treasure), they create random treasures when
         applied. Archetype name is "chest".
    <LI> Second there are the permanent chests - Those are containers,
         they can be opened and closed again. Archetype name is "chest_2".
    </UL> ]]>
  </use>
  <attribute arch="race" editor="container class" type="string">
    If set, the container will hold only certain types of objects.
    Possible choices for &lt;container class&gt; are: "gold and jewels",
    "arrows" and "keys".

    Unfortunately it is not easy to create new container
    classes, because items need a matching counterpiece-attribute
    to the &lt;container class&gt; before they can be put inside a
    container. This attribute ("race") is set only for the existing
    container classes.
  </attribute>
  <attribute arch="slaying" editor="key string" type="string">
    If &lt;key string&gt; is set, only players with a special key
    of matching &lt;key string&gt; are able to open the container.
  </attribute>
  <attribute arch="container" editor="maximum weight" type="int">
    The container can hold a maximum total weight of the given value
    in gram. Note that this weight limit is calculated *after* the
    weight reduction (&lt;reduce weight&gt;) has been applied.
  </attribute>
  <attribute arch="Str" editor="reduce weight %" type="int">
    This value determines how much the weight of items is reduced in
    percent, when put inside the container. &lt;reduce weight %&gt; 0 means no
    reduction, &lt;reduce weight %&gt; 100 means items are weightless inside.
    Most default values are in the range of ten.
  </attribute>
  <attribute arch="is_cauldron" editor="alchemy cauldron" type="bool">
    If set, the container can be used as alchemy-cauldron.
    The player can put ingredients inside, close it, cast alchemy
    and if his formulae is true, he'll get what he longed for.
  </attribute>
  <attribute arch="unique" editor="unique item" type="bool">
    Unique items exist only one time on a server. If the item
    is taken, lost or destroyed - it's gone for good.
    All contents of a unique container are unique as well.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  <attribute arch="other_arch" editor="animation arch" type="string">
    This is used for a certain kind of... "animation" when
    opening the container. Stick to the default arches here
    and you won't get into trouble.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may contain a description of the container.
  </attribute>
</type>

<!--####################################################################-->
<type number="103" name="Converter">
  <ignore>
    <attribute arch="value" />
    <attribute arch="nrof" />
    <attribute arch="name_pl" />
    <attribute arch="no_pick" />
    <attribute arch="unpaid" />
    <attribute arch="title" />
  </ignore>
  <description><![CDATA[
    Converters are like "exchange tables". When the player drops a
    specific type of items, they get converted into other items, at a
    predefined exchange-ratio. ]]>
  </description>
  <use><![CDATA[
    Converters are better than shopping with doormats, because the
    converters never get sold out. For some items like food or jewels
    those "exchange tables" are really nice, while for the more important
    stuff like potions converters should not exist.
    <br><br>
    VERY IMPORTANT: Be careful with the exchange-ratio! When you drop
    items on a converter, the stuff you get must be of equal or lesser
    value than before! (Except if you are using "rare" items like
    dragonscales for payment). The code will not check if your ratio is
    sane, so the player could gain infinite wealth by using your converter. ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="slaying" editor="cost arch" type="string">
    &lt;cost arch&gt; is the name of the archetype the player has to
    put on the converter, as payment.
  </attribute>
  <attribute arch="food" editor="cost number" type="int">
    The player has to put &lt;cost number&gt; items of &lt;cost arch&gt;
    on the converter, in order to get &lt;receive number&gt; items
    of &lt;receive arch&gt;.
  </attribute>
  <attribute arch="other_arch" editor="receive arch" type="string">
    &lt;receive arch&gt; is the name of the archetype to convert into.
    This field is ignored if the converter has items in inventory. In this
    case one of the inventory items is duplicated. The duplicated item is
    randomly chosen from all items present.
  </attribute>
  <attribute arch="sp" editor="receive number" type="int">
    The player has to put &lt;cost number&gt; items of &lt;cost arch&gt;
    on the converter, in order to get &lt;receive number&gt; items
    of &lt;receive arch&gt;.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may contain a description of the converter.
  </attribute>
</type>

<!--####################################################################-->
<type number="42" name="Creator">
  <ignore>
    <ignore_list name="system_object" />
  </ignore>
  <description><![CDATA[
    A creator is an object which creates another object when it
    is triggered. The child object can be anything. Creators are
    VERY useful for all kinds of map-mechanisms. They can even
    periodically create things. ]]>
  </description>
  <use><![CDATA[
    Don't hesitate to hide your creators under the floor.
    The created items will still always appear ontop of the floor. ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="other_arch" editor="create arch" type="string">
    This string defines the object that will be created.
    You can choose any of the existing arches.
    This field is ignored if the creator has items in inventory. In this case
    one of the inventory items is duplicated. The duplicated item is randomly
    chosen from all items present.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    Whenever the connection value is activated,
    the creator gets triggered.
  </attribute>
  &activate_on;
  <attribute arch="lifesave" editor="infinit uses" type="bool">
    If &lt;infinit uses&gt; is set, the creator will work
    infinitely, regardless of the value in &lt;number of uses&gt;.
  </attribute>
  <attribute arch="speed" editor="speed" type="float">
    When this field is set the creator will periodically create stuff
    (and will still do so when the connection is triggered).
    A value of 1 means roughly 8 times a second.
  </attribute>
  <attribute arch="hp" editor="number of uses" type="int">
    The creator can be triggered &lt;number of uses&gt; times, thus
    creating that many objects, before it dissappears.
    Default is &lt;number of uses&gt; 1 (-&gt; one-time usage).
  </attribute>
  <attribute arch="slaying" editor="name of creation" type="string">
    The created object will bear the name and title specified in &lt;name of
    creation&gt;.  If nothing is set, the standard name and title of the
    archetype is used.
  </attribute>
  <attribute arch="level" editor="level of creation" type="int">
    The created object will be of that level. If zero/unset,
    the standard level of the archetype is used.
  </attribute>
</type>

<!--####################################################################-->
<type number="51" name="Detector">
  <ignore>
    <ignore_list name="system_object" />
  </ignore>
  <description><![CDATA[
    Detectors work quite much like inv. checkers/pedestals: If the detector
    finds a specific object, it toggles its connected value.
    <br><br>
    What is "unique" about them, compared to inv. checkers/ pedestals?
    - First, detectors check their square for a match periodically, not
    instantly. Second, detectors check directly for object names. Third,
    detectors do not check the inventory of players/monsters. ]]>
  </description>
  <use><![CDATA[
    There is one major speciality about detectors: You can detect spells
    blown over a detector! To detect a lighting bolt for example, set
    "slaying ligthing" and "speed 1.0". In combination with spellcasting
    walls, this can be very useful for map-mechanisms. ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="slaying" editor="match name" type="string">
    &lt;match name&gt; specifies the name of the object we are looking for.
    Actually it does also check for the &lt;key string&gt; in key-objects,
    but for this case inventory checkers are often more powerful to use.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    When the detector is triggered, all objects with the same
    connection value get activated.
  </attribute>
  <attribute arch="speed" editor="detection speed" type="float">
    This value defines the time between two detector-checks.
    If you want the detector to behave almost like pedestals/buttons,
    set speed rather high, like &lt;detection speed&gt; 1.0.
  </attribute>
  &speed_left;
  <attribute arch="speed_left" editor="speed left" type="float">
    The speed left. This value is incremented by &lt;speed&gt; on every tick.
    If it is larger than 0, the detector checks, and the speed is decremented
    by 1.
  </attribute>
</type>

<!--####################################################################-->
<type number="112" name="Director">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Directors change the direction of spell objects and other projectiles
    that fly past. Unlike spinners, directors always move objects in the
    same direction. It does not make a difference from what angle you
    shoot into it.<br>
    Directors are visible per default. ]]>
  </description>
  <use><![CDATA[
    Directors are rarely used in maps. Sometimes they are placed to
    change the direction of spells coming out of magic walls,
    "channeling" spell-projectiles in some direction. When doing this,
    <B>never place directors facing each other with magic walls fireing
    into them!</B> The spell-projectiles bouncing between the directors
    would accumulate to huge numbers and at some point slow down the
    server by eating memory- and CPU-time.
    <br><br>
    You'd better not place directors in monster vs. player combat
    areas too much, because that freaks out wizard-type players. ]]>
  </use>
  <attribute arch="sp" editor="direction" type="list_direction">
    Projectiles will leave the director flying in the selected &lt;direction&gt;.
    A director with direction &lt;none&gt; simply stops projectiles.
    (The latter works out a bit strange for some spells).
  </attribute>
  &move_on;
</type>

<!--####################################################################-->
<type number="158" name="Disease">
  <ignore>
    <ignore_list name="system_object" />
  </ignore>
  <description><![CDATA[
    Diseases are an intersting form of spellcraft in Crossfire.
    Once casted, they can spread out and infect creatures in a large
    area. Being infected can have various effects, from amusing farts
    to horrible damage - almost everything is possible. ]]>
  </description>
  <use><![CDATA[
    Diseases are extremely flexible and usable in a many ways.
    So far they are mostly used for causing bad, unwanted effects.
    You could just as well create a disease which helps the player
    (recharging mana for example).
    Infection with a "positive disease" could even be a quest reward. ]]>
  </use>
  <attribute arch="invisible" value="1" type="fixed" />
  <attribute arch="level" editor="plaque level" type="int">
    The &lt;plaque level&gt; is proportional to the disease's deadliness.
    This mainly reflects in the &lt;damage&gt;. It has no effect on
    most other symptoms. Neverthless, it is a very important value for
    all damage-inflicting diseases.
  </attribute>
  <attribute arch="race" editor="infect race" type="string">
    The disease will only infect creatures of the specified &lt;race&gt;.
    "&lt;race&gt; *" means every creature can be infected.
  </attribute>
  <attribute arch="ac" editor="progressiveness" type="int">
    Every time the disease "moves" the severity of the symptoms are increased
    by &lt;progressiveness&gt;/100. (severity = 1 + (accumlated progression)/100)
  </attribute>
<section name="spreading">
  <attribute arch="wc" editor="infectiosness" type="int">
    The &lt;infectiosness&gt; defines the chance of new creatures getting
    infected. If you set this too high, the disease is very likely to
    be too effective.

    &lt;infectiosness&gt;/127 is the chance of someone in range catching it.
  </attribute>
  <attribute arch="last_grace" editor="attenuation" type="int">
    The &lt;attenuation&gt; value reduces the diseases' &lt;infectiosness&gt;
    everytime it infects someone new. This limits how many generations
    a disease can propagate.
  </attribute>
  <attribute arch="magic" editor="infection range" type="int">
    &lt;infection range&gt; sets the range at which infection may occur.
    If positive, the &lt;infection range&gt; is level dependant - If negative,
    it is not:
    E.g. "&lt;infection range&gt; -6" means creatures can be infected in
    six square range, and &lt;plaque level&gt; doesn't modify that.
  </attribute>
  <attribute arch="maxhp" editor="persistence" type="int">
    &lt;persistence&gt; defines how long the disease can persist OUTSIDE a host.
    The disease can "move" &lt;persistence&gt; times outside a host before it
    vanishes. A negative value means the disease lasts for permanent
    (which is only recommended to use in maps without monsters).
  </attribute>
  <attribute arch="maxgrace" editor="curing duration" type="int">
    The disease will last in the host for &lt;curing duration&gt; "disease moves"
    (Assuming the host survives and doesn't use a curing spell).
    After this period the disease is naturally cured, which provides the
    host with immunity from this particular disease of lower or equal level.

    A negative value means the disease can never be cured naturally.

    Note that this value can be further modulated by spell-parameters,
    if the disease is registered as spell in the code. Due to that,
    most default diseases take a lot longer to cure than it seems.
  </attribute>
  <attribute arch="speed" editor="moving speed" type="float">
    The &lt;speed&gt; of the disease determines how fast the disease will
    "move", thus how fast the symptoms strike the host.
  </attribute>
  &speed_left;
</section>
<section name="symptoms">
  <attribute arch="attacktype" editor="attacktype" type="bitmask_attacktype">
    The disease will attack the host with the given &lt;attacktype&gt;.
    Godpower attacktype is commonly used for "unresistable" diseases.
  </attribute>
  <attribute arch="dam" editor="damage" type="int">
    A disease with a positive &lt;damage&gt; value will strike the player for that
    amount of damage every time the symptoms occur.
    A negative &lt;damage&gt; value produces %-based damage: "&lt;damage&gt; -10" means
    the player's health is reduced by 10% every time the symptoms strike.

    Diseases with %-based damage can be dangerous - but not deadly -
    for players of all levels.
  </attribute>
  <attribute arch="other_arch" editor="create arch" type="string">
    If set, the specified arch is created and dropped every time the
    symptoms strike.

    This can be various things: farts, body pieces, eggs ...
    Even monsters can be created that way. You could also make a
    disease where some exotic stuff like money/gems is created.
  </attribute>
  <attribute arch="last_sp" editor="slowdown penalty" type="int">
    If set, the disease imposes a &lt;slowdown penalty&gt; while being infected.
    The player's speed is reduced by &lt;slowdown penalty&gt; % of normal value.
  </attribute>
  <attribute arch="exp" editor="exp. for curing" type="int">
    When the player manages to cure this disease (with a curing spell),
    he is awarded with &lt;exp. for curing&gt; experience.
  </attribute>
  <attribute arch="maxsp" editor="mana depletion" type="int">
    Every time the disease "moves", the player's mana is
    reduced by the value of &lt;mana depletion&gt;.
    For negative values, a %-based amount is taken.
  </attribute>
  <attribute arch="last_eat" editor="food depletion" type="int">
    Every time the disease "moves", the player's food is
    reduced by the value of &lt;food depletion&gt;.
    For negative values, a %-based amount is taken.
  </attribute>
  <attribute arch="hp" editor="health regen." type="int">
    This value increases the player's healing rate.
    Negative values decrease it.
  </attribute>
  <attribute arch="sp" editor="mana regen." type="int">
    This value increases the player's rate of mana regeneration.
    Negative values decrease it.
  </attribute>
</section>
<section name="disability">
  <attribute arch="Str" editor="strength" type="int">
    The player's strength will rise by the given value
    while being infected. (Negative values make strength fall)
  </attribute>
  <attribute arch="Dex" editor="dexterity" type="int">
    The player's dexterity will rise by the given value
    while being infected. (Negative values make dexterity fall)
  </attribute>
  <attribute arch="Con" editor="constitution" type="int">
    The player's constitution will rise by the given value
    while being infected. (Negative values make constitution fall)
  </attribute>
  <attribute arch="Int" editor="intelligence" type="int">
    The player's intelligence will rise by the given value
    while being infected. (Negative values make intelligence fall)
  </attribute>
  <attribute arch="Pow" editor="power" type="int">
    The player's power will rise by the given value
    while being infected. (Negative values make power fall)
  </attribute>
  <attribute arch="Wis" editor="wisdom" type="int">
    The player's wisdom will rise by the given value
    while being infected. (Negative values make wisdom fall)
  </attribute>
  <attribute arch="Cha" editor="charisma" type="int">
    The player's charisma will rise by the given value
    while being infected. (Negative values make charisma fall)
  </attribute>
</section>
  <attribute arch_begin="msg" arch_end="endmsg" editor="message" type="text">
    This text is displayed to the player every time the
    symptoms strike.
  </attribute>
</type>

<!--####################################################################-->
<type number="23" name="Door">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    A door can be opened with a normal key. It also can be broken by attacking
    it, and it can be defeated with the lockpicking skill. If a door is
    defeated, horizontally and vertically adjacent doors are automatically
    removed. ]]>
  </description>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="alive" value="1" type="fixed" />
  &movement_types_terrain;
  <attribute arch="hp" editor="hitpoints" type="int">
    The more &lt;hitpoints&gt; the door has, the longer it takes to be broken.
  </attribute>
  <attribute arch="ac" editor="armour class" type="int">
    Doors of high &lt;armour class&gt; are less likely to get hit.
    &lt;armour class&gt; can be considered the "counterpiece" to
    &lt;weapon class&gt;.
  </attribute>
  <attribute arch="other_arch" editor="drop arch" type="string">
    This string defines the object that will be created when the door was
    defeated.
  </attribute>
  <attribute arch="randomitems" editor="treasurelist" type="treasurelist">
    This entry determines what kind of traps will appear in the door.
  </attribute>
  <attribute arch="treasure_env" editor="treasure in env" type="bool">
    Set this flag to move treasure items created into the environment (map)
    instead of putting them into the object.
  </attribute>
</type>

<!--####################################################################-->
<type number="83" name="Duplicator">
  <ignore>
    <ignore_list name="system_object" />
  </ignore>
  <description><![CDATA[
    When activated, a duplicator can duplicate, multiply or destroy a pile of
    objects which lies somewhere on top of the duplicator.
    The duplicator has one arch name specified as &lt;target arch&gt;,
    and only objects of this archetype can be affected.<br>
    It will multiply the number of items in the pile, by the &lt;multiply factor&gt;.
    If the latter is set to zero, it will destroy objects. ]]>
  </description>
  <use><![CDATA[
    I hope it is clear that one must be very cautious when inserting a duplicator
    anywhere with &lt;multiply factor&gt; greater than one.
    It is designed to be used for betting mechanisms only (bet -&gt; win/loose).
    It is <b>not acceptable</b> to allow duplication of anything other than
    coins, gold and jewels. Besides, it is very important that the chance to
    loose the input matches the chance to earn winnings.<br>
    A duplicator with &lt;multiply factor&gt; 3 for example should have a
    loosing rate of 2/3 = 67%. ]]>
  </use>
  <attribute arch="other_arch" editor="target arch" type="string">
    Only objects of matching archtype, lying ontop of the duplicator will be
    duplicated, multiplied or removed. All other objects will be ignored.
  </attribute>
  <attribute arch="level" editor="multiply factor" type="int">
    The number of items in the target pile will be multiplied by the
    &lt;multiply factor&gt;. If it is set to zero, all target objects
    will be destroyed.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    An activator (lever, altar, button, etc) with matching connection value
    is able to trigger this duplicator. Be very careful that players cannot
    abuse it to create endless amounts of money or other valuable stuff!
  </attribute>
  &activate_on;
</type>

<!--####################################################################-->
<type number="66" name="Exit">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    When the player applies an exit, he is transferred to a different location.
    (Monsters cannot use exits.) Depending on how it is set, the player applies
    the exit just by walking into it, or by pressing &lt;a&gt;pply when standing on
    the exit.  ]]>
  </description>
  <use><![CDATA[
    If you want to have an invisible exit, set &lt;invisible&gt; (, of course
    &lt;apply by walking&gt;), and put it *under* the floor. Otherwise it could be
    detected with the show_invisible spell.
    <br><br>
    You can be quite creative with the outlook of secret exits (their "face").
    Don't forget to give the player relyable hints about them though. ]]>
  </use>
  <attribute arch="slaying" editor="exit path" type="string">
    The exit path defines the map that the player is transferred to.
    You can enter an absolute path, beginning with '/' (for example
    "/peterm/FireTemple/fire1"). It can also be a relative path, not beginning
    with '/' (On the map "/peterm/FireTemple/Fire2" for example I could use the
    relative path "Fire1"). Use relative paths whenever possible! Note that
    upper/lower case must always be set correctly. However, please use lower
    case only.
    It is well possible to have an exit pointing to the same map that the exit
    is on. If slaying is not set in an exit, the player will see a message like
    "the exit is closed".
  </attribute>
  <attribute arch="hp" editor="destination X" type="int">
    The exit destinations define the (x, y)-coordinates where the exit
    leads to.
    If both are set to zero, the player will be transferred to the "default
    enter location" of the destined map. The latter can be set in the map-
    properties as "Enter X/Y". Though, please DO NOT use that.
    It turned out to be a source for numerous map-bugs.
  </attribute>
  <attribute arch="sp" editor="destination Y" type="int">
    The exit destinations define the (x, y)-coordinates where the exit
    leads to.
    If both are set to zero, the player will be transferred to the "default
    enter location" of the destined map. The latter can be set in the map-
    properties as "Enter X/Y". Though, please DO NOT use that.
    It turned out to be a source for numerous map-bugs.
  </attribute>
  &move_on;
  <attribute arch_begin="msg" arch_end="endmsg" editor="exit message" type="text">
    If set, this message will be displayed to the player when he applies the exit.
    This is quite useful to throw in some "role-play feeling": "As you enter the
    dark cave you hear the sound of rustling dragonscales...". Well, my english
    is poor, but you get the point. =)
  </attribute>
  <attribute arch="damned" editor="set savebed" type="bool">
    If set, then players using this exit will have their savebed position
    set to the destination of the exit when passing through.
  </attribute>
</type>

<!--####################################################################-->
<type number="72" name="Flesh">
  <description><![CDATA[
    Just like with food, the player can fill his stomache and gain a
    little health by eating flesh-objects. <br>
    For dragon players, flesh plays a very special role though: If the
    flesh has resistances set, a dragon player has a chance to gain resistance in
    those categories. The only constraint to this process is the &lt;flesh level&gt;.
    Don't forget that flesh items with resistances have to be balanced
    according to map/monster difficulty. ]]>
  </description>
  <use><![CDATA[
    For dragon players, flesh items can be highly valuable. Note that many
    standard monsters carry flesh items from their &lt;treasurelist&gt;.
    These flesh items "inherit" resistances and level from the monster they belong to.
    When you add special flesh items to the inventory of a monster, this is
    not the case - so you have to set it manually.
    <br><br>
    Generally adding special flesh-treaties for dragon players is a great thing
    to do. Always consider that dragon players might really not be interested
    in that special piece of weapon or armour, so don't let the dragon-fellows miss
    out on the reward completely. ]]>
  </use>
  <attribute arch="food" editor="foodpoints" type="int">
    The player's stomache will get filled with this amount of foodpoints.
    The player's health will increase by &lt;foodpoints&gt;/50 hp.
  </attribute>
  <attribute arch="level" editor="flesh level" type="int">
    The &lt;flesh level&gt; is not visible to the players and it affects only
    dragon players. Normally this value reflects the level of the monster
    from which the flesh item originates.
    Dragon players always search for flesh of highest level possible,
    because it bears the best chance to gain high resistances.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  &resistances_flesh_section;
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may describe the item.
  </attribute>
</type>

<!--####################################################################-->
<type number="0" name="Floor">
  <required>
    <attribute arch="is_floor" value="1" />
    <attribute arch="alive" value="0" />
  </required>
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Floor is a very basic thing whithout too much
    functionality. It's a floor - you stand on it. ]]>
  </description>
  <attribute arch="is_floor" value="1" type="fixed" />
  <attribute arch="no_pick" value="1" type="fixed" />
<section name="terrain">
  &movement_types_terrain;
  <attribute arch="is_wooded" editor="wooded terrain" type="bool">
    This flag indicates this spot contains wood or high grass.
    Players with activated woodsman skill can move faster here.
  </attribute>
  <attribute arch="is_hilly" editor="hilly terrain" type="bool">
    This flag indicates this spot contains hills or large rocks.
    Players with activated mountaineer skill can move faster here.
  </attribute>
</section>
  <attribute arch="no_magic" editor="no spells" type="bool">
    If enabled, it is impossible for players to use (wizard-)
    spells on that spot.
  </attribute>
  <attribute arch="damned" editor="no prayers" type="bool">
    If enabled, it is impossible for players to use prayers
    on that spot. It also prevents players from saving.
  </attribute>
  <attribute arch="unique" editor="unique map" type="bool">
    Unique floor means that any items dropped on that spot
    will be saved byond map reset. For permanent apartments,
    all floor tiles must be set &lt;unique map&gt;.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may describe the object.
  </attribute>
</type>

<!--####################################################################-->
<type number="67" name="Floor (Encounter)">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Encounter-Floor is pretty much the same as normal floor.
    Most outdoor floor/ground-arches are set to be "encounters".
    That is kind of a relict from former code: When walking over
    encounter-floor, players sometimes got beamed to little maps
    with monsters on them. Nowadays this feature is disabled -
    Hence encounter floor is not different from normal floor. ]]>
  </description>
  <attribute arch="is_floor" value="1" type="fixed" />
  <attribute arch="no_pick" value="1" type="fixed" />
<section name="terrain">
  &movement_types_terrain;
  <attribute arch="is_wooded" editor="wooded terrain" type="bool">
    This flag indicates this spot contains wood or high grass.
    Players with activated woodsman skill can move faster here.
  </attribute>
  <attribute arch="is_hilly" editor="hilly terrain" type="bool">
    This flag indicates this spot contains hills or large rocks.
    Players with activated mountaineer skill can move faster here.
  </attribute>
</section>
  <attribute arch="no_magic" editor="no spells" type="bool">
    If enabled, it is impossible for players to use (wizard-)
    spells on that spot.
  </attribute>
  <attribute arch="damned" editor="no prayers" type="bool">
    If enabled, it is impossible for players to use prayers
    on that spot. It also prevents players from saving.
  </attribute>
  <attribute arch="unique" editor="unique map" type="bool">
    Unique floor means that any items dropped on that spot
    will be saved byond map reset. For permanent apartments,
    all floor tiles must be set &lt;unique map&gt;.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may describe the object.
  </attribute>
</type>

<!--####################################################################-->
<type number="6" name="Food">
  <description><![CDATA[
    By eating/drinking food-objects, the player can fill his
    stomache and gain a little health. ]]>
  </description>
  <attribute arch="food" editor="foodpoints" type="int">
    The player's stomache will get filled with this amount of foodpoints.
    The player's health will increase by &lt;foodpoints&gt;/50 hp.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
</type>

<!--####################################################################-->
<type number="91" name="Gate">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Gates play an important role in Crossfire. Gates can be opened
    by activating a button/trigger, by speaking passwords (-> magic_ear)
    or carrying special key-objects (-> inventory checker).
    Unlike locked doors, gates can get shut again after a player has
    passed, which makes them more practical in many cases. ]]>
  </description>
  <use><![CDATA[
    Use gates to divide your maps into seperated areas. After solving
    area A, the player gains access to area B, and so on. Make your
    maps more complex than "one-way". ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="speed" value="1" type="float">
    The speed of the gate affects how fast it is closing/opening.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    Whenever the inventory checker is triggered, all objects with identical
    &lt;connection&gt; value get activated. This only makes sense together with
    &lt;blocking passage&gt; disabled.
  </attribute>
  <attribute arch="wc" editor="position state" type="int">
    The &lt;position state&gt; defines the position of the gate:
    Zero means completely open/down, the "number of animation-steps" (usually
    about 6 or 7) means completely closed/up state. I suggest you don't
    mess with this value - Leave the default in place.
  </attribute>
  &movement_types_terrain;
  <attribute arch="no_magic" editor="restrict spells" type="bool">
    Restricting the use of spells to pass this gate. This has
    an effect only if &lt;block view&gt; is disabled.
  </attribute>
  <attribute arch="damned" editor="restrict prayers" type="bool">
    Restricting the use of prayers to pass this door. This has
    an effect only if &lt;block view&gt; is disabled.
  </attribute>
</type>

<!--####################################################################-->
<type number="113" name="Girdle">
  <import_type name="Amulet" />
  <description><![CDATA[
    Wearing a girdle, the object's stats will directly be inherited to
    the player. Girdles usually provide stats- or damage bonuses and no
    defense. ]]>
  </description>
  <use><![CDATA[
    Feel free to create your own special artifacts. However, it is very
    important that you keep your artifact in balance with existing maps. ]]>
  </use>
  <attribute arch="magic" editor="magic bonus" type="int">
    &lt;magic bonus&gt; works just like ac, except that it can be improved by
    "scrolls of Enchant Armour" or reduced by acid. It is less useful
    than direct armour-class bonus on the helmet.

    Important: &lt;magic bonus&gt; on girdles has no effect if there is no
    &lt;armour class&gt; set. Girdles shouldn't have &lt;armour class&gt;, thus
    &lt;magic bonus&gt; is pointless here.
  </attribute>
</type>

<!--####################################################################-->
<type number="100" name="Gloves">
  <import_type name="Amulet" />
  <description><![CDATA[
    Wearing gloves, the object's stats will directly be inherited to
    the player. Gloves can add defense or damage bonuses. ]]>
  </description>
  <use><![CDATA[
    Feel free to create your own special artifacts. However, it is very
    important that you keep your artifact in balance with existing maps. ]]>
  </use>
  <attribute arch="magic" editor="magic bonus" type="int">
    If the gloves provide &lt;armour class&gt;, &lt;magic bonus&gt; will increase it.
    If the gloves have &lt;weapon class&gt; instead, then &lt;magic bonus&gt;
    will increase that.
  </attribute>
</type>

<!--####################################################################-->
<type number="93" name="Handle">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    A handle can be applied by players and (certain) monsters.
    Every time it is applied, the &lt;connection&gt; value is triggered. ]]>
  </description>
  <use><![CDATA[
    Handles are commonly used to move gates. When placing your lever,
    don't forget that some monsters are able to apply it.
    The ability to apply levers is rare among monsters -
    but vampires can do it for example. ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="connected" editor="connection" type="int">
    Every time the handle is applied, all objects
    with the same &lt;connection&gt; value are activated.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may describe the item. You can use this
    message to explain the handle's purpose to the player.
  </attribute>
</type>

<!--####################################################################-->
<type number="27" name="Handle Trigger">
  <import_type name="Handle" />
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Handle triggers are handles which reset after a short period
    of time. Every time it is either applied or reset, the
    &lt;connection&gt; value is triggered. ]]>
  </description>
  <use><![CDATA[
    When you connect an ordinary handle to a gate, the gate normally remains
    opened after the first player passed. If you want to keep the gate shut,
    connecting it to a handle trigger is an easy solution.  ]]>
  </use>
</type>

<!--####################################################################-->
<type number="88" name="Hazard Floor">
  <required>
    <attribute arch="is_floor" value="1" />
  </required>
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    The best example for Hazard Floor is lava. It works like standard
    floor, but damages all creatures standing on it.
    Damage is taken in regular time intervals. ]]>
  </description>
  <use><![CDATA[
    The default lava for example does minor damage. But you can turn
    it up so that your hazard floor poses a real threat.<br>
    Like magic walls, such floors add a permanent thrill to your map.
    You can use that to safely chase off too-weak players, or just
    to have something different. ]]>
  </use>
  <attribute arch="is_floor" value="1" type="fixed" />
  <attribute arch="lifesave" value="1" type="fixed" />
  &move_on;
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="attacktype" editor="attacktype" type="bitmask_attacktype">
    This attribute specifys the attacktypes that this floor uses to
    damage it's victims. Attacktypes are: physical, fire, cold.. etc.
    If you want a real tough hazard floor, add more than just one attacktype.
  </attribute>
  <attribute arch="dam" editor="base damage" type="int">
    The &lt;base damage&gt; defines how much damage is inflicted to the
    victim per hit. The final damage is influenced by several other
    factors like the victim's resistance and level.
  </attribute>
  <attribute arch="wc" editor="weaponclass" type="int">
    &lt;weapon class&gt; improves the chance of hitting the victim.
    Lower values are better.
    Usually, hazard floors like lava are supposed to hit the
    victim all the time. Therefore, &lt;weaponclass&gt; should be set
    to something like -30.
  </attribute>
  <attribute arch="level" editor="attack level" type="int">
    I guess this value is supposed to work similar to monster levels.
    But in fact, it does not seem to have an effect. Set any non-zero
    value to be on the safe side.
  </attribute>
<section name="terrain">
  &movement_types_terrain;
  <attribute arch="is_wooded" editor="wooded terrain" type="bool">
    This flag indicates this spot contains wood or high grass.
    Players with activated woodsman skill can move faster here.
  </attribute>
  <attribute arch="is_hilly" editor="hilly terrain" type="bool">
    This flag indicates this spot contains hills or large rocks.
    Players with activated mountaineer skill can move faster here.
  </attribute>
</section>
  <attribute arch="no_magic" editor="no spells" type="bool">
    If enabled, it is impossible for players to use (wizard-)
    spells on that spot.
  </attribute>
  <attribute arch="damned" editor="no prayers" type="bool">
    If enabled, it is impossible for players to use prayers
    on that spot. It also prevents players from saving.
  </attribute>
  <attribute arch="unique" editor="unique map" type="bool">
    Unique floor means that any items dropped on that spot
    will be saved byond map reset. For permanent apartments,
    all floor tiles must be set &lt;unique map&gt;.
  </attribute>
</type>

<!--####################################################################-->
<type number="34" name="Helmet">
  <import_type name="Amulet" />
  <description><![CDATA[
    Wearing a helmet, the object's stats will directly be inherited to
    the player. Normal helmets usually increase defense, while crowns
    add more special bonuses like stats/resistances paired with
    low defense. ]]>
  </description>
  <use><![CDATA[
    Feel free to create your own special artifacts. However, it is very
    important that you keep your artifact in balance with existing maps. ]]>
  </use>
  <attribute arch="magic" editor="magic bonus" type="int">
    &lt;magic bonus&gt; works just like ac, except that it can be improved by
    "scrolls of Enchant Armour" or reduced by acid. It is less useful
    than direct armour-class bonus on the helmet.

    Important: &lt;magic bonus&gt; on helmets has no effect if there is no
    &lt;armour class&gt; set. It only works in combination with &lt;armour class&gt;.
    Crowns for instance typically provide no &lt;amour class&gt;.
  </attribute>
</type>

<!--####################################################################-->
<type number="56" name="Holy Altar">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Holy_altars are altars for the various religions. Praying
    at a Holy_altar will make you a follower of that god, and
    if you already follow that god, you may get some extra bonus. ]]>
  </description>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="other_arch" editor="god name" type="string">
    The altar belongs to the god of the given name. Possible options for
    &lt;god name&gt; are: Devourers, Lythander, Mostrai, Gaea, Ruggilli, Gnarg,
    Gorokh, Valriel and Sorig.

    If you want to have an unconsecrated altar, set
    &lt;god name&gt; 0 and eventually &lt;reconsecrate level&gt; 0.
  </attribute>
  <attribute arch="level" editor="reconsecrate level" type="int">
    To re-consecrate an altar, the player's wisdom level must be as
    high or higher than this value. In that way, some altars can not
    be re-consecrated, while other altars, like those in dungeons, could be.

    Altars located in temples should have at least &lt;reconsecrate level&gt; 120.
    Some characters might need those altars, they would be very unhappy to
    see them re-consecrated to another cult.
  </attribute>
</type>

<!--####################################################################-->
<type number="35" name="Horn">
  <ignore>
    <attribute arch="title" />
  </ignore>
  <description><![CDATA[
    Horns are very similar to rods. The difference is that horns regenerate
    spellpoints faster and thus are more valuable than rods.
    <br><br>
    A horn contains a spell. The player can use this spell by applying and
    "fireing" (blowing) the horn. Unlike wands/scrolls, horns can be
    used endlessly. ]]>
  </description>
  <use><![CDATA[
    Horns are powerful due to their fast recharge rate. They should
    never contain high level attacking spells. Even curing/healing spells
    are almost too good on a horn. ]]>
  </use>
  <attribute arch="sp" editor="spell" type="spell">
    Sets the &lt;spell&gt; of the horn. Consider twice before handing out any
    horns to players, since they can be used endlessly without any mana cost!
    Horns with heal/ restoration/ protection spells, IF available, MUST be
    very very VERY hard to get!
  </attribute>
  <attribute arch="level" editor="casting level" type="int">
    The casting level of the &lt;spell&gt; determines it's power.
    For attack spells, level should not be set too high.
  </attribute>
  <attribute arch="hp" editor="initial spellpoints" type="int">
    This value represents the initial amount of spellpoints in the horn.
    Naturally, this is quite unimportant.
  </attribute>
  <attribute arch="maxhp" editor="max. spellpoints" type="int">
    When the horn is fully charged up, it will hold this maximum amount of
    spellpoints. Make sure it is enough to cast the contained spell at least
    once. But don't set the value too high, as that might make the horn way
    too effective.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may contain a description of the horn.
  </attribute>
</type>

<!--####################################################################-->
<type number="73" name="Inorganic">
  <description><![CDATA[
    Inorganic materials are generally used as ingredients for
    alchemical receipes. By themselves, they have no special
    functionalities. ]]>
  </description>
  <attribute arch="is_dust" editor="is dust" type="bool">
  </attribute>
  &resistances_basic;
</type>

<!--####################################################################-->
<type number="64" name="Inventory Checker">
  <ignore>
    <ignore_list name="system_object" />
  </ignore>
  <description><![CDATA[
    Inventory checkers passively check the players inventory for a
    specific object. You can set a connected value that is triggered
    either if that object is present or missing (-&gt; "last_sp") when a
    player walks over the inv. checker. A valid option is to remove the
    matching object (usually not recommended, see "last_heal").
    <br><br>
    Alternatively, you can set your inv. checker to block all players
    that do/don't carry the matching object.
    <br><br>
    As you can see, inv. checkers are quite powerful, holding a
    great variety of possibilities. ]]>
  </description>
  <use><![CDATA[
    Putting a check_inventory space in front of a gate (one below) and
    one on the opposite side works reasonably well as a control mechanism.
    Unlike the key/door-combo, this one works infinite since it is
    independant from map reset. Use it to put a "structure" into your
    maps: Player must solve area A to gain access to area B. This concept
    can be found in nearly every RPG - simple but effective. ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="slaying" editor="match key string" type="string">
    This string specifies the object we are looking for: We have a match
    if the player does/don't carry a key object or a mark with identical
    &lt;key string&gt;. Note that key objects usually appear as "passports" in
    this context. A typical example is the city gate mechanism of scorn.
  </attribute>
  <attribute arch="race" editor="match arch name" type="string">
    This string specifies the object we are looking for: We have a match
    if the player does/don't carry an object of archtype &lt;match arch name&gt;.
  </attribute>
  <attribute arch="hp" editor="match type" type="int">
    This value specifies the object we are looking for: We have a match
    if the player does/don't carry an object that is of type &lt;match type&gt;.

    Example: Set &lt;match type&gt; 15 (type 15 =&gt; weapon) and &lt;blocking passage&gt;
    enabled. Now you have an inv. checker blocking all players that carry any
    kind of melee weapon. To pass, a player is forced to leave behind all
    his weaponry... bad news for a warrior. ;)
  </attribute>
  <attribute arch="last_sp" editor="match = having" type="bool">
    Enabled means having that object is a match.
    Disabled means not having that object is a match.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    Whenever the inventory checker is triggered, all objects with identical
    &lt;connection&gt; value get activated. This only makes sense together with
    &lt;blocking passage&gt; disabled.
  </attribute>
  &movement_types_terrain;
  <attribute arch="last_heal" editor="remove match" type="bool">
    &lt;remove match&gt; means remove object if found. Setting this is usually not
    recommended because inv. checkers are in general invisible. So, unlike
    for altars/ locked doors, the player won't expect to lose an object when
    walking over that square. And he doesn't even get a message either.

    So, *if* you enable &lt;remove match&gt;, make sure
    to inform the player what's going on!
  </attribute>
</type>

<!--####################################################################-->
<type number="163" name="Item Transformer">
  <description><![CDATA[
    An item transformer is simply applied, after having marked a 'victim'
    item.  If the victim is suitable, it will be transformed into something
    else.]]>
  </description>
  <use><![CDATA[
    To make an item transformable, you just have to fill the 'slaying' field.
    The syntax is:
    <br>
    <pre>slaying slayer:[yield ]new_item[;slayer:[yield ]new_item]*</pre>
    <br>
    with [] denoting optional part, and * any number of preceding [].
    'new_item' must be the name of an existing archetype.
    <br><br>
    Example, for object apple: slaying knife:2 half_apple
    <br><br>
    This means that, when applying a knife (should be an Item Transformer),
    one 'apple' will be transformed into 2 'half_apple'.]]>
  </use>
  <attribute arch="food" editor="number of uses" type="int">
    &lt;number of uses&gt; controls how many times the item transformer can
    be used. The value 0 means "unlimited"
  </attribute>
  <attribute arch="slaying" editor="verb" type="string">
    Contains the verb that is used to construct a message to the player
    applying the item transformer.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may contain a description of the item transformer.
  </attribute>
</type>

<!--####################################################################-->
<type number="60" name="Jewel">
  <description><![CDATA[
    Items of the type Gold &amp; Jewels are handled like a currency.
    Unlike for any other type of item, in shops, the buy- and selling
    prices differ only marginally. ]]>
  </description>
  <attribute arch="race" value="gold and jewels" type="fixed" />
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may describe the object.
  </attribute>
</type>

<!--####################################################################-->
<type number="24" name="Key">
  <description><![CDATA[
    When carrying a key, a normal door can be opened. The key will
    disappear. ]]>
  </description>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
</type>

<!--####################################################################-->
<type number="20" name="Locked Door">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    A locked door can be opened only when carrying
    the appropriate special key. ]]>
  </description>
  <use><![CDATA[
    If you want to create a locked door that cannot be opened (no key),
    set a &lt;key string&gt; like "no_key_available". This will clearify things
    and only a fool would create a key matching that string.

    Door-objects can not only be used for "doors". In many maps these
    are used with all kinds of faces/names, especially often as
    "magic force". A good example is the map "Lake_Country/ebony/masterlev".
    There you have magic forces (door objects) put under certain artifact
    items. To get your hands on the artifacts, you need to bring up the
    appropriate quest items (key objects). ]]>
  </use>
  <attribute arch="move_type" value="0" type="fixed" />
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="slaying" editor="key string" type="string">
    The &lt;key string&gt; in the door must be identical with the
    &lt;key string&gt; in the special key, then the door is unlocked.
    It is VERY important to set the &lt;key string&gt; to something that
    is unique among the CF mapset.

    DONT EVER USE the default string "set_individual_value".
  </attribute>
  <attribute arch="no_magic" editor="restrict spells" type="bool">
    Restricting the use of spells to pass this door.
    This should be set in most cases.
    (Don't forget that the spell "dimension door" is easily
    available at about wisdom level 10).
  </attribute>
  <attribute arch="damned" editor="restrict prayers" type="bool">
    Restricting the use of prayers to pass this door.
    This should be set in most cases.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="lock message" type="text">
    When a player is trying to open the door without carrying the
    appropriate key, this text is displayed to the player. This is
    a good opportunity to place hints about the special key needed
    to unlock the door.
  </attribute>
</type>

<!--####################################################################-->
<type number="29" name="Magic Ear">
  <ignore>
    <ignore_list name="system_object" />
  </ignore>
  <description><![CDATA[
    Magic_ears trigger a connected value
    when the player speaks a specific keyword. ]]>
  </description>
  <use><![CDATA[
    Whenever you put magic_ears on your maps, make sure there are
    CLEAR and RELYABLE hints about the keywords somewhere. Don't make
    something like a gate that is opened by speaking "open" or
    "sesame", expecting the player to figure this out all by himself.
    <br><br>
    Magic_ears are typically used for interaction with NPCs. You
    can create the impression that the NPC actually *does* something
    according to his conversation with a player. Mostly this means
    opening a gate or handing out some item, but you could be quite
    creative here. ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="connected" editor="connection" type="int">
    The Magic_ear will trigger all objects with the
    same connection value, every time it is activated.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="keyword-matching" type="text">
    This textfield contains the keyword-matching-syntax. The text should
    have the following format: "@match &lt;keyword1&gt;|&lt;keyword2&gt;|... ".
    Any number of keywords from one to infinite is allowed. Make sure
    they are seperated by a '|'.

    Examples: "@match yes", "@match gold|treasure". The connected
    value will be triggerd when the player speaks any of the given
    keywords within a two-square radius. IMPORTANT: Upper/lower case
    does not make a difference!
  </attribute>
</type>

<!--####################################################################-->
<type number="62" name="Magic Wall">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Magic walls fire spells in a given direction, in regular intervals.
    Magic walls can contain any spell. However, some spells do not
    operate very successfully in them. The only way to know is to test
    the spell you want to use with a wall.
    <br><br>
    Several types of magical walls are predefined for you in the
    archetypes, and can be found on the "connected" Pickmap. ]]>
  </description>
  <use><![CDATA[
    Spellcasting walls pose an interesting alternative to monsters.
    Usually they are set to be undestroyable. Thus, while monsters
    in a map can be cleared out, the magic walls remain. Low level
    characters for example will not be able to pass through their
    spell-area, hence they cannot loot a map that a high level character
    might have cleared out.
    <br><br>
    Another point of magic walls is that if the player dies, he has to face
    them all again. Magic walls can add a kind of "permanent thrill" to
    your maps.
    <br><br>
    Be careful that your magic walls don't kill the monsters on a map. If
    placing monsters, eventually take ones that are immune to the
    walls' spell(s).
    <br><br>
    It is possible to make walls rotate when triggered. But that is so
    confusing (and useless IMHO) that I did not mention it above. You
    can find a working example on the map
    "/pup_land/castle_eureca/castle_eureca8". ]]>
  </use>
  <attribute arch="dam" editor="spell" type="spell">
    The magic wall will cast this &lt;spell&gt;.
  </attribute>
  <attribute arch="level" editor="spell level" type="int">
    The wall will cast it's spells at level &lt;spell level&gt;. "level 1"
    walls cast spells at minimal strength. "level 100" walls cast deadly
    spells. Arch default is level 1 - you should always set this value
    to meet the overall difficulty of your map.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    Every time the &lt;connection&gt; value is triggered, the wall will cast
    it's spell. You should set &lt;casting speed&gt; to zero, or this won't
    have much visible effect.
  </attribute>
  &activate_on;
  <attribute arch="speed" editor="casting speed" type="float">
    The &lt;casting speed&gt; defines the spellcasting speed of the wall.
    You can fine-tune how long the duration between two casts shall
    be. If you want to create a wall that can be activated (cast per
    trigger) via connected lever/button/etc, you must set "speed 0".
  </attribute>
  &speed_left;
  <attribute arch="sp" editor="direction" type="list_direction">
    The magic wall will cast it's spells always in the specified
    &lt;direction&gt;. A magic wall with direction set to &lt;none&gt; will
    always fire in a random direction.
  </attribute>
  &movement_types_terrain;
<section name="destroyable">
  <attribute arch="alive" editor="is destroyable" type="bool">
    Walls with &lt;is destroyable&gt; enabled can be attacked and (eventually)
    destroyed by the player. If disabled, all other attributes on
    this tab, as well as resistances, are meaningless.
  </attribute>
  <attribute arch="hp" editor="hitpoints" type="int">
    The more &lt;hitpoints&gt; the wall has, the longer
    it takes to be destroyed.
  </attribute>
  <attribute arch="maxhp" editor="max hitpoints" type="int">
    &lt;max hitpoints&gt; are the maximum amount of hitpoints the wall
    can have. This only makes sense if the wall can regain health.
  </attribute>
  <attribute arch="ac" editor="armour class" type="int">
    A magic wall of high &lt;armour class&gt; is less likely to get hit from
    an opponent. &lt;armour class&gt; can be considered the "counterpiece"
    to &lt;weapon class&gt;.
  </attribute>
</section>
&resistances_basic;
</type>

<!--####################################################################-->
<type number="55" name="Marker">
  <ignore>
    <ignore_list name="system_object" />
  </ignore>
  <description><![CDATA[
    A marker is an object that inserts an invisible force (a mark) into a
    player stepping on it. This force does nothing except containing a
    &lt;key string&gt; which can be discovered by detectors or inventory
    checkers. It is also possible to use markers for removing marks again.
    <br><br>
    Note that the player has no possibility to "see" his own marks,
    except by the effect that they cause on the maps. ]]>
  </description>
  <use><![CDATA[
    Markers hold real cool possibilities for map-making. I encourage
    you to use them frequently. However there is one negative point
    about markers: Players don't "see" what's going on with them. It is
    your task, as map-creator, to make sure the player is always well
    informed and never confused.
    <br><br>
    Please avoid infinite markers when they aren't needed. They're
    using a little space in the player file after all, so if there
    is no real purpose, set an expire time. ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="slaying" editor="key string" type="string">
    The &lt;key string&gt; can be detected by inv. checkers/detectors.
    If the player already has a force with that &lt;key string&gt;,
    there won't be inserted a second one.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    When the detector is triggered, all objects with the same
    connection value get activated.
  </attribute>
  <attribute arch="speed" editor="marking speed" type="float">
    The &lt;marking speed&gt; defines how quickly it will mark something
    standing on the marker. Set this value rather high to make
    sure the player really gets his mark. I think &lt;marking speed&gt; 1.0
    should do fine.
  </attribute>
  &speed_left;
  <attribute arch="food" editor="mark duration" type="int">
    This value defines the duration of the force it inserts.
    If nonzero, the duration of the player's mark is finite:
    about 1 food per 10 seconds. &lt;mark duration&gt; zero/unset
    means the mark will stay on the player forever.
  </attribute>
  <attribute arch="name" editor="delete mark" type="string">
    When the player steps onto the marker, all existing forces in
    the players inventory with a &lt;key string&gt; matching &lt;delete mark&gt;
    will be removed. If you don't want to remove any marks, leave
    this textfield empty.

    Note that the string &lt;delete mark&gt; is set as the name of
    this marker. So don't be confused, and remember changing the
    name will take effect on the marker's functionality.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="marking message" type="text">
    In the moment when the player gets marked, this text is displayed
    to him. You should really set a message in any marker you create,
    because it's the only way for the player to notice what's going on.
  </attribute>
</type>

<!--####################################################################-->
<type number="36" name="Money">
  <ignore>
    <attribute arch="unpaid" />
  </ignore>
  <description><![CDATA[
    Items of the type Money are handled as currency.
    Money cannot be sold/bought in shops. When money is dropped
    in a shop, it stays the same.<br>
    When a player picks an item from a shop and attempts to
    walk over the shop mat, the item's selling-price is automatically
    subtracted from the player's money.
    <br><br>
    For money, always use the default arches.
    Don't modify them. ]]>
  </description>
  <attribute arch="race" value="gold and jewels" type="fixed" />
</type>

<!--####################################################################-->
<type number="0" name="Monster &amp; NPC">
  <required>
    <attribute arch="is_floor" value="0" />
    <attribute arch="alive" value="1" />
    <attribute arch="tear_down" value="0" />
  </required>
  <ignore>
    <attribute arch="material" />
    <attribute arch="name_pl" />
    <attribute arch="nrof" />
    <attribute arch="value" />
    <attribute arch="unpaid" />
  </ignore>
  <description><![CDATA[
    Monsters can behave in various kinds of ways.
    They can be aggressive, attacking the player. Or peaceful,
    helping the player - maybe joining him as pet.
    The unagressive creatures who communicate with players are
    usually called "NPCs" (Non Player Character), a well-known
    term in role-play environments. ]]>
  </description>
  <use><![CDATA[
    Monsters play a central role in most maps. Choosing the right
    combination of monsters for your map is vital:
    <UL>
    <LI> Place only monsters of slightly varying (increasing) strength.
         It's no fun to play for two hours just to find out the last
         monster is unbeatable. Similar, it's not exciting to fight orcs
         after passing a room of dragons.<br>
         This rule applies only for linear maps (one room after the other),
         with treasure at the end. You can sprinkle the treasure around,
         or make non-linear maps - That is often more entertaining.
    <LI> Places with high level monsters must not be easy to reach.
         Balrogs, Dragonmen and the likes should be at the end of a quest,
         not at the beginning.
    <LI> Don't stick monsters together that tend to kill each other.
         Fire- and cold dragons in one room for example is a bad idea.
         By weakening and killing each other they are easy prey for players,
         not worth the experience they hold.
    <LI> Create your own monsters, especially for "boss"-type monsters.
         Having stage-bosses guarding treasure is a lot of fun when done right.
         Avoid to create monsters with completely non-intuitive abilities:
         Don't give ice-spells to firedragons or vice versa. Don't add
         draining attack to trolls, etc. Additionally, you should inform the
         player before he bumps right into some very special/unusual monster.
    <LI> Last but not least: Always keep an eye on the experience your monsters
         hold. Design your maps in a way that high experience
         is always well-defended. Don't make large rooms full with only one kind
         of monster. Keep in mind the different abilities/techniques players
         can use.
    </UL>
    I know it's impossible to make the perfectly balanced map. There's always
    some part which is found too easy or too hard for a certain kind of player.
    Just give it your best shot. And listen to feedback from players if you
    receive some. :-) ]]>
  </use>
  <attribute arch="alive" value="1" type="fixed" />
  <attribute arch="randomitems" editor="treasurelist" type="treasurelist">
    When the monster is killed, items from the treasurelist will
    drop to the ground. This is a common way to reward players
    for killing (masses of) monsters.

    Note that you can always put items into the monster's
    inventory. Those will drop-at-kill just like the stuff
    from the &lt;treasurelist&gt;.
  </attribute>
  <attribute arch="treasure_env" editor="treasure in env" type="bool">
    Set this flag to move treasure items created into the environment (map)
    instead of putting them into the object.
  </attribute>
  <attribute arch="level" editor="level" type="int">
    A monster's &lt;level&gt; is the most important attribute.
    &lt;level&gt; affects the power of a monster in various ways.
  </attribute>
  <attribute arch="race" editor="race" type="string">
    Every monster should have a race set to categorize it.
    The monster's &lt;race&gt; can have different effects:
    Slaying weapons inflict tripple damage against enemy races
    and holy word kills only enemy races of the god.
  </attribute>
  <attribute arch="exp" editor="experience" type="int">
    When a player kills this monster, he will get exactly this
    amount of &lt;experience&gt;. The experience will flow into
    the skill-category the player used for the kill.

    If you create special monsters of tweaked strenght/abilities,
    always make sure that the &lt;experience&gt; is set to a
    reasonable value. Compare with existing arches to get a feeling
    what reasonable means. Keep in mind that spellcasting monsters
    are a lot harder to kill than non-spellcasters!
  </attribute>
  <attribute arch="speed" editor="speed" type="float">
    The &lt;speed&gt; determines how fast a monster will both move
    and fight. High &lt;speed&gt; makes a monster considerably stronger.
  </attribute>
  &speed_left;
  <attribute arch="other_arch" editor="breed monster" type="string">
    This only takes effect if &lt;multiply&gt; is enabled. The monster will
    create a &lt;breed monster&gt; every once in a while. &lt;breed monster&gt;
    can be set to any valid arch-name of a monster. Multipart monster
    should not be used.
  </attribute>
  <attribute arch="generator" editor="multiply" type="bool">
    Monsters with &lt;generator&gt; enabled will create a &lt;breed monster&gt;
    every once in a while. Mice are a good example for this effect.
    If enabled, you must also set &lt;breed monster&gt; or check
    &lt;template generation&gt; and put other monsters in the inventory.
  </attribute>
  <attribute arch="use_content_on_gen" editor="template generation" type="bool">
    This only takes effect if &lt;multiply&gt; is enabled. The monster
    will create a new monster every once in a while by duplicating it's inventory.
    In this case, the &lt;breed monster&gt; value is never used and can be forgotten.
    Each time the monster need to generate an object, it will be
    a randomly chosen item from the inventory. When generator is destroyed,
    inventory is destroyed.
  </attribute>
  &move_type;
  <attribute arch="undead" editor="undead" type="bool">
    Several spells only affect undead monsters:
    turn undead, banish undead, holy word, etc.
  </attribute>
  <attribute arch="carrying" editor="carries weight" type="int">
    If a monster has something in the inventory, this
    value can be set to reflect the slowdown due to
    the carried weight.
  </attribute>
  <attribute arch="precious" editor="precious" type="bool">
    Set this flag to indicate that this monster is precious, i.e.
    it should not be lightly destroyed. This is most useful on pets and
    keeps the server from destroying them on destroy_pets/monster floors
    and will try to save them when the player logs out.
  </attribute>

<section name="melee">
  <attribute arch="attacktype" editor="attacktype" type="bitmask_attacktype">
    This number is a bitmask, specifying the monster's attacktypes
    for melee damage. Attacktypes are: physical, magical, fire, cold.. etc.
    Strong monsters often have more than just physical attacktype.

    When a monster with multiple attacktypes hits aan oponent, it will do
    as much damage as the "best" of it's attacktypes does. So, the more
    attacktypes, the more dangerous. Attacktypes "magic" and "chaos" are
    somehow exceptions.
  </attribute>
  <attribute arch="dam" editor="damage" type="int">
    Among other parameters, &lt;damage&gt; affects how much melee damage
    a monster inflicts. &lt;damage&gt; is used as base value for damage per
    hit. &lt;level&gt;, &lt;speed&gt;, &lt;weapon class&gt; and resistances also
    take effect on the melee damage of a monster.
  </attribute>
  <attribute arch="wc" editor="weapon class" type="int">
    Monsters of high &lt;weapon class&gt; are more likely to really hit
    their opponent. &lt;weapon class&gt; can be considered the "counterpiece"
    to &lt;armour class&gt;.
  </attribute>
  <attribute arch="hp" editor="health points" type="int">
    The &lt;health points&gt; of a monster define how long it takes to
    kill it. With every successful hit from an opponent, &lt;health points&gt;
    get drained - The monster dies by zero &lt;health points&gt;.
  </attribute>
  <attribute arch="maxhp" editor="max health" type="int">
    &lt;max health&gt; is the maximum amount of &lt;health points&gt; this
    monster can have.
  </attribute>
  <attribute arch="ac" editor="armour class" type="int">
    Monsters of low &lt;armour class&gt; are less likely to get hit from
    their opponent. &lt;armour class&gt; can be considered the "counterpiece"
    to &lt;weapon class&gt;.
    Values typically range between +20 (very bad) to -20 (quite good).
  </attribute>
  <attribute arch="Con" editor="healing rate" type="int">
    Monsters regenerate this many health points each 4 ticks. Hence, the
    healing rate is independent of &lt;speed&gt;.
  </attribute>
  <attribute arch="reflect_missile" editor="reflect missiles" type="bool">
    A monster with this flag has the ability to &lt;reflect missiles&gt;,
    all kinds of projectiles (e.g. arrows, bolts, boulders) will
    bounce off.
  </attribute>
  <attribute arch="hitback" editor="hitback" type="bool">
    Monsters with &lt;hitback&gt; enabled hurt the attacker in proportion
    to the amount of damage the *attacker* inflicted. This damage
    is additional to the regular melee damage of the monster.
    As far as I know, hitback uses acid attacktype, and it only takes
    effect if the monster actually has acid attacktype at it's disposal.
    Acid spheres for example use this feature.
  </attribute>
  <attribute arch="one_hit" editor="one hit only" type="bool">
    Monsters with &lt;one hit only&gt; dissapear after one successful hit
    to a player.
  </attribute>
</section>

<section name="spellcraft">
  <attribute arch="can_cast_spell" editor="can cast spell" type="bool">
    If &lt;can cast spell&gt; is disabled, the monster cannot cast any spell.
    Only wands/rods/etc can be used, given the appropriate abilities.
  </attribute>
  <attribute arch="reflect_spell" editor="reflect spells" type="bool">
    A monster with this flag has the ability to &lt;reflect spells&gt;,
    all kinds of spell-bullets and -beams will bounce off.

    Generally this flag should not be set because it puts
    wizard-type players at an unfair disadvantage.
  </attribute>
  <attribute arch="sp" editor="spellpoints" type="int">
    Like players, monsters need &lt;spellpoints&gt; to do magic. Monsters use
    them for both wizard- and prayer-spells. However, this value defines
    only the amount of *initial* spellpoints the monster starts with.
    When creating a spellcasting monster, remember that &lt;max spellpoints&gt;
    and &lt;spellpoint regen.&gt; are more important than just initial
    &lt;spellpoints&gt;.
  </attribute>
  <attribute arch="maxsp" editor="max spellpoints" type="int">
    &lt;max spellpoints&gt; is the maximum number of spellpoints a monster
    can hold. Setting this to high values has little effect unless
    the monster has a decent &lt;spellpoint regen.&gt;, or the spell
    "regenerate mana" at it's disposal.
  </attribute>
  <attribute arch="Pow" editor="spellpoint regen." type="int">
    Monsters regenerate this many spellpoints each 16 ticks. Hence, the
    spellpoint regeneration rate is independent of &lt;speed&gt;.

    To make a real tough spellcasting monster, the rate of spellpoint
    regeneration is most important. If your monster is still not casting
    fast enough, give it the spell-ability of "regenerate mana".
    That, paired with high &lt;max spellpoints&gt;, is the ultimate thing.
  </attribute>
  <attribute arch="path_attuned" editor="attuned paths" type="bitmask_spellpath">
    Click on the &lt;attuned paths&gt; button to select spellpaths.
    The creature will get attuned to the specified spellpaths.
  </attribute>
  <attribute arch="path_repelled" editor="repelled paths" type="bitmask_spellpath">
    Click on the &lt;repelled paths&gt; button to select spellpaths.
    The creature will get repelled to the specified spellpaths.
  </attribute>
  <attribute arch="path_denied" editor="denied paths" type="bitmask_spellpath">
    Click on the &lt;denied paths&gt; button to select spellpaths.
    The creature won't be able to cast spells of the specified paths.
  </attribute>
</section>

<section name="ability">
  <attribute arch="Int" editor="detect hidden" type="int">
    The &lt;detect hidden&gt; value gives monsters the ablitity to find
    hidden/invisible creatures. Higher values make for better
    detection-skills. Enabling &lt;see invisible&gt; makes this value
    obsolete.
  </attribute>
  <attribute arch="see_invisible" editor="see invisible" type="bool">
    A monster with the ability to &lt;see invisible&gt; cannot be fooled
    with by invisible or hiding players. This flag is a must-have
    for high-level monsters. When a monster is unable to detect
    invisible players, it can be killed without fighting back.
  </attribute>
  <attribute arch="can_see_in_dark" editor="see in darkness" type="bool">
    A monster with the ability to &lt;see in darkness&gt; cannot be fooled
    by spells of darkness or dark maps. This flag is a "should-have"
    for high-level monsters. When a monster is unable to see in
    darkness, players can cast darkness and sneak around it safely.
  </attribute>
  <attribute arch="can_use_weapon" editor="can use weapons" type="bool">
    Monster is able to wield weapon type objects.
  </attribute>
  <attribute arch="can_use_bow" editor="can use bows" type="bool">
    Monster is able to use missile-weapon type objects.
  </attribute>
  <attribute arch="can_use_armour" editor="can use armour" type="bool">
    Monster is able to wear protective equipment like brestplate
    armour, shields, helmets etc.
  </attribute>
  <attribute arch="can_use_ring" editor="can use rings" type="bool">
    Monster is able to wear rings.
  </attribute>
  <attribute arch="can_use_wand" editor="can use wands" type="bool">
    Monster is able to use wands and staves.
  </attribute>
  <attribute arch="can_use_rod" editor="can use rods" type="bool">
    Monster is able to use rods.
  </attribute>
  <attribute arch="can_use_scroll" editor="can use scrolls" type="bool">
    Monster is able to read scrolls.
  </attribute>
  <attribute arch="can_use_skill" editor="can use skills" type="bool">
    Monster is able to use skills from it's inventory.
    For example, you can put a throwing skill object and some
    boulders into the monster's object and set &lt;can use skills&gt;.
  </attribute>
</section>

<section name="behave">
  <attribute arch="monster" editor="monster behaviour" type="bool">
    When &lt;monster behaviour&gt; is enabled, this object will behave
    like a monster: It can move and attack enemies (which are
    typically players).
    This flag should be set for all monsters as-such.
    Monsters which don't move, like guards, should also have
    &lt;monster behaviour&gt;, but in combination with &lt;stand still&gt;.
    It should *not* be set for things like immobile generators.
  </attribute>
  <attribute arch="unaggressive" editor="unaggressive" type="bool">
    &lt;unaggressive&gt; monsters do not attack players unless attacked first.
  </attribute>
  <attribute arch="friendly" editor="friendly" type="bool">
    &lt;friendly&gt; monsters help the player, attacking any
    non-friendly monsters in range.
  </attribute>
  <attribute arch="stand_still" editor="stand still" type="bool">
    Monsters which &lt;stand still&gt; won't move to leave their position.
    When agressive, they will attack all enemies who get close to
    them. This behaviour is commonly known from castle guards.

    In older versions of Crossfire it was possible to eventually
    push a &lt;stand still&gt;-monster out of position by force.
    I believe this is no longer possible. Neverthless, you should
    still be cautious when lining up &lt;stand still&gt;-monster in order
    to "defend" something: Such monsters are rather easy to kill.
    It's good for low level maps, but not much more.
  </attribute>
  <attribute arch="sleep" editor="asleep" type="bool">
    Being &lt;asleep&gt;, a monster won't move unless a player enters the
    &lt;sensing range&gt; of the monster. Usually the sensing range is
    larger than the players line of sight. Due to that, in most cases
    the player won't ever notice weither a monster was asleep or not.
  </attribute>
  <attribute arch="will_apply" editor="misc. actions" type="bitmask_will_apply">
    This entry defines which kinds of environment actions the
    creature is able to perform.
  </attribute>
  <attribute arch="pick_up" editor="pick up" type="bitmask_pick_up">
    Click on the &lt;pick up&gt; button and select which types of objects
    the creature should try to pick up.

    Note also that if &lt;can use armor&gt;, &lt;can use weapon&gt;, &lt;can use ring&gt;...
    etc are set, then the creature will pick up the matching items even
    if this is not set here.
  </attribute>
  <attribute arch="Wis" editor="sensing range" type="int">
    &lt;sensing range&gt; determines how close a player needs to be before
    the creature wakes up. This is done as a square, for reasons of speed.
    Thus, if the &lt;sensing range&gt; is 11, any player that moves within the
    11x11 square of the monster will wake the monster up. If the player
    has stealth, the size of this square is reduced in half plus 1.
  </attribute>
  <attribute arch="attack_movement_bits_0_3" editor="attack movement" type="list_attack_movement_bits_0_3">
    If this is set to default, the standard mode of movement will be used.
  </attribute>
  <attribute arch="attack_movement_bits_4_7" editor="normal movement" type="list_attack_movement_bits_4_7">
    This movement is not in effect when the monster has an enemy and should
    only be used for non agressive monsters.
  </attribute>
  <attribute arch="run_away" editor="run at % health" type="int">
    This is a percentage value in the range 0-100.
    When the monster's health points drop below this percentage
    (relative to max health), it attempts to run away from the
    attacker.
  </attribute>
</section>
  &resistances_basic;
  <attribute arch_begin="msg" arch_end="endmsg" editor="npc message" type="text">
  </attribute>
</type>

<!--####################################################################-->
<type number="28" name="Monster (Grimreaper)">
  <import_type name="Monster &amp; NPC" />
  <ignore>
    <attribute arch="material" />
    <attribute arch="name_pl" />
    <attribute arch="nrof" />
    <attribute arch="value" />
    <attribute arch="unpaid" />
  </ignore>
  <description>
    A grimreaper is a monster that vanishes after it did some number of
    draining attacks.
  </description>
<section name="grimreaper">
  <attribute arch="value" editor="attacks" type="int">
    The object vanishes after this number of draining attacks.
  </attribute>
</section>
</type>

<!--####################################################################-->
<type number="65" name="Mood Floor">
  <ignore>
    <ignore_list name="system_object" />
  </ignore>
  <description><![CDATA[
    As the name implies, mood floors can change the "mood" of
    a monsters/NPC. For example, an unagressive monster could be
    turned mad to start attacking. Similar, an agressive monster
    could be calmed. ]]>
  </description>
  <use><![CDATA[
    Mood floors are absolutely cool for NPC interaction. To make an
    unaggressive monster/NPC attack, put a creator with "other_arch
    furious_floor" under it. Connect the creator to a magic_ear, so the
    player speaks a keyword like "stupid sucker" - and the monster attacks.
    <br><br>
    To turn an NPC into a pet, put a charm_floor under it and connect
    it directly to a magic_ear. Then the player speaks a keyword like
    "help me" - and the NPC joins him as pet.
    <br><br>
    (Of course you must always give clear hints about keywords!
    And there is no reason why you couldn't use a button/lever/pedestal
    etc. instead of a magic_ear.) ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="last_sp" editor="mood" type="list_mood">
    &lt;mood&gt; is used to determine what will happen to the
    monster when affected by the mood floor:

    &lt;mood&gt; 'furious': Makes all monsters aggressive

    &lt;mood&gt; 'angry': As above but pets are unaffected

    &lt;mood&gt; 'calm': Makes all monsters unaggressive

    &lt;mood&gt; 'sleep': Puts all monsters to sleep

    &lt;mood&gt; 'charm': Turns monster into a pet of person
                    who triggers the square. This setting is not
                    enabled for continous operation, you need to
                    insert a &lt;connection&gt; value!
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    This should only be set in combination with &lt;mood number&gt; 4.
    Normally, monsters are affected by the mood floor as soon as they
    step on it. But charming (monster -&gt; pet) is too powerful,
    so it needs to be activated.

    Typically it is connected to an altar, for buying a "hireling".
    But a powerful pet could as well be the reward for solving a
    quest. Or even better: It could be *part* of a quest!
  </attribute>
  <attribute arch="no_magic" editor="no spells" type="bool">
    If enabled, it is impossible for players to use (wizard-)
    spells on that spot.
  </attribute>
  <attribute arch="damned" editor="no prayers" type="bool">
    If enabled, it is impossible for players to use prayers
    on that spot. It also prevents players from saving.
  </attribute>
</type>

<!--####################################################################-->
<type number="40" name="Mover">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Movers move the objects above them. However, only living objects
    are affected (monsters/NPCs always, players optional). Movers have
    a direction, so players can be made to move in a pattern, and so
    can monsters. Motion is involuntary. Additionally, players or
    monsters can be "frozen" while ontop of movers so that they MUST
    move along a chain of them.
    <br><br>
    Multisquare monsters can be moved as well, given
    enough space. Movers are usually invisible. ]]>
  </description>
  <use><![CDATA[
    NEVER EVER consider a mover being unpassable in the backwards
    direction. Setting "forced movement" makes it seemingly impossible
    but there is still a trick: One player can push a second player
    past the mover, in opposite to the mover's direction! The more
    movers, the more players needed. Hence, don't make a treasure
    room that is surrounded by movers instead of solid walls/gates.
    <br><br>
    Btw, it does not make a difference putting movers above or
    below the floor. Moreover, movers that are set to be invisible
    cannot be discovered with the show_invisible spell.
    <br><br>
    Note that Movers and Directors are seperate objects, even though
    they look and act similar. Directors only do spells/missiles,
    while movers only do living creatures (depending on how it
    is set: monsters and players). ]]>
  </use>
  <attribute arch="attacktype" editor="forced movement" type="bool">
    If forced movement is enabled, the mover "freezes" anyone it
    moves (so they are forced to move along a chain).
    For players there is no way to escape this forced movement,
    except being pushed by a second player.
  </attribute>
  <attribute arch="maxsp" editor="freeze duration" type="int">
    The player will be "frozen" for that many moves.
    If &lt;freeze duration&gt; is zero, with &lt;forced movement&gt;
    enabled, then &lt;freeze duration&gt; gets assigned the
    "default value" 2 automatically.
  </attribute>
  <attribute arch="speed" editor="movement speed" type="float">
    The movement speed value determines how fast a chain of
    these movers will push a player along (default is -0.2).
  </attribute>
  &speed_left;
  <attribute arch="sp" editor="direction" type="list_direction">
    The mover will push creatures in the specified &lt;direction&gt;.
    A mover with direction set to &lt;none&gt; will spin clockwise,
    thus pushing creatures in unpredictable directions.
  </attribute>
  <attribute arch="lifesave" editor="gets used up" type="bool">
    If enabled, the mover gets "used up" after a certain number of moves
    (specified by &lt;number of uses&gt;). If disabled, the mover works infinitely.
  </attribute>
  <attribute arch="hp" editor="number of uses" type="int">
    This value has only a meaning if &lt;gets used up&gt; is set:
    &lt;number of uses&gt; is the number of times minus one, that it
    will move a creature before disappearing. (It will move
    someone &lt;number of uses&gt;+1 times, then vanish).
  </attribute>
<section name="targets">
  <attribute arch="level" editor="move players" type="bool">
    If &lt;move players&gt; is enabled, both players and monsters will be
    moved. In the arches' default it is disabled - thus ONLY monsters
    get moved. Remember that "monsters" includes NPCs!

    This feature provides you with the possibility to make NPCs
    literally "come to life". Example: The player is talking with an
    NPC, speaking a certain keyword. This triggers a magic_ear and
    activates creators, creating (per default: monster-only) movers
    under the NPC's feet. The NPC starts "walking" on a predefined
    route! Note that it's useful to set this NPC immune to everything,
    preventing the player to push the NPC off his trace.
  </attribute>
  <attribute arch="move_on" editor="movement type" type="movement_type">
     Which movement types activate the mover.
  </attribute>
</section>
</type>

<!--####################################################################-->
<type number="17" name="Pedestal">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Pedestals are designed to detect certain types of living objects.
    When a predefined type of living creature steps on the pedestal, the
    connected value is triggered. ]]>
  </description>
  <use><![CDATA[
    If you want to create a place where only players of a certain race
    can enter, put a teleporter over your pedestal. So the teleporter is
    only activated for players of the matching race. Do not use gates,
    because many other players could sneak in. If you put powerful
    artifacts into such places, generally set "startequip 1", so that
    they are preserved for that one race and can't be traded to others. ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="slaying" editor="match race" type="string">
    the &lt;match race&gt; defines the object we're looking for. If &lt;match race&gt;
    matches the monster's or the player's race, we have a match.
    Yes, pedestals can detect a player's race! E.g. you could create a
    place where only fireborns can enter, by setting "slaying unnatural".

    If it is set to "player", any player stepping on the pedestal
    is a match. Very useful if you want to open a gate for players
    but not for monsters.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    When the pedestal is triggered, all objects with the same
    connection value get activated.
  </attribute>
  &move_on;
</type>

<!--####################################################################-->
<type number="94" name="Pit">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Pits are holes, transporting the player when he walks (and falls) into them.
    A speciality about pits is that they don't transport the player to
    the exact destination, but within a two-square radius of the destination
    (never on blocked squares).<br>
    Optionally, pits can get closed and opened, similar to gates.<br><br>
    Monsters and items are affected by pits just as well as players.
    Even multipart monsters can fall through them, given enough space. ]]>
  </description>
  <use><![CDATA[
    Pits can add interesting effects to your map. When using them, make
    sure to use them in a "logical way": Pits should always drop the
    player to some kind of lower level. They should not be used to
    randomly interconnect maps like teleporters do. ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="connected" editor="connection" type="int">
    When a &lt;connection&gt; value is set, the pit can be opened/closed
    by activating the connection.
  </attribute>
  &activate_on;
  <attribute arch="hp" editor="destination X" type="int">
    The pit will transport creatures (and items) randomly into a two-square
    radius of the destination coordinates.
    If the destination square becomes blocked, the pit will act like
    being filled up and not work anymore!
  </attribute>
  <attribute arch="sp" editor="destination Y" type="int">
    The pit will transport creatures (and items) randomly into a two-square
    radius of the destination coordinates.
    If the destination square becomes blocked, the pit will act like
    being filled up and not work anymore!
  </attribute>
  <attribute arch="wc" editor="position state" type="int">
    The &lt;position state&gt; defines the position of the gate:
    Zero means completely open/down, the "number of animation-steps" (usually
    about 6 or 7) means completely closed/up state. I suggest you don't
    mess with this value - Leave the default in place.
  </attribute>
  &move_on;
</type>

<!--####################################################################-->
<type number="7" name="Poison Food">
  <description><![CDATA[
    When eating, the player's stomache is drained by 1/4 of food.
    If his food drops to zero, the player might even die. ]]>
  </description>
</type>

<!--####################################################################-->
<type number="5" name="Potion">
  <description><![CDATA[
    The player can drink these and gain various kinds of benefits
    (/penalties) by doing so. ]]>
  </description>
  <use><![CDATA[
    One potion should never give multiple benefits at once. ]]>
  </use>
  <attribute arch="level" editor="potion level" type="int">
    If the potion contains a spell, the spell is cast at this level.
    For other potions it should be set at least to 1.
  </attribute>
  <attribute arch="sp" editor="spell" type="spell">
    When a player drinks this potion, the selected spell
    will be casted (once). This should work for any given spell.
    E.g. heal is "sp 35", magic power is "sp 67".
  </attribute>
  <attribute arch="attacktype" editor="special effect" type="list_potion_effect">
    There are two types of special effects for potions:
    'life restoration' - restore the player's stats lost by death or draining
                    (this has nothing in common with the restoration spell!)
    'improvement' - increase the player's maximum health/mana/grace
                    by a very small amount.
  </attribute>
  <attribute arch="cursed" editor="cursed" type="bool">
    If a potion is cursed, benefits generally turn into penalties.
    Note that potions can be "uncursed" by praying over an altar,
    with relative ease. *But* the potion must be identified to notice
    that it is cursed &gt;:)
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  &player_stat_resist_sections;
</type>

<!--####################################################################-->
<type number="156" name="Power Crystal">
  <description><![CDATA[
    Power crystals can store a player's mana:
    When the player applies the crystal with full mana, half of
    it flows into the crystal. When the player applies it with
    lacking mana, the crystal replenishes the player's mana. ]]>
  </description>
  <attribute arch="sp" editor="initial mana" type="int">
    &lt;initial mana&gt; is the amount of spellpoints that the
    crystal holds when the map is loaded.
  </attribute>
  <attribute arch="maxsp" editor="mana capacity" type="int">
    The &lt;mana capacity&gt; defines how much mana can be stored
    in the crystal. This is what makes the crystal interesting.
    Wizard-players will always seek for crystals with large
    capacities.
  </attribute>
</type>

<!--####################################################################-->
<type number="13" name="Projectile">
  <description><![CDATA[
    Projectiles like arrows/crossbow bolts are used as ammunition
    for shooting weapons.
    <br><br>
    It's very easy to add new pairs of weapons &amp; projectiles.
    Just set matching &lt;ammunition class&gt; both for shooting
    weapon and projectile. ]]>
  </description>
  <use><![CDATA[
    If you want to create new kinds of projectiles, you could
    add an alchemical receipe to create these.

    Don't create new pairs of weapons &amp; projectiles unless
    they really fullfill a useful purpose. In fact, even bows
    and crossbows are rarely ever used. ]]>
  </use>
  <attribute arch="attacktype" editor="attacktype" type="bitmask_attacktype">
    This number is a bitmask, specifying the projectile's attacktypes.
    Attacktypes are: physical, magical, fire, cold.. etc.
    This works identical to melee weapons. Note that shooting
    weapons cannot have attacktypes.
  </attribute>
  <attribute arch="race" editor="ammunition class" type="string">
    Only shooting weapons with matching &lt;ammunition class&gt; can fire
    these projectiles. For arrows set "arrows", for crossbow bolts
    set "crossbow bolts" (big surprise).

    In certain cases, the ammunition class is displayed in the game.
    Hence, when you create a new ammunition class, choose an
    intuitive name like "missiles", "spirit bolts" - whatever.

    You can also make special containers holding these projectiles
    by setting the &lt;container class&gt; to match your &lt;ammunition class&gt;.
  </attribute>
  <attribute arch="slaying" editor="slaying race" type="string">
    Slaying means the weapon does tripple (3x) damage to monsters
    of the specified race. If &lt;slaying race&gt; matches an arch name,
    only monsters of that archtype receive tripple damage.
    Tripple damage is very effective.
  </attribute>
  <attribute arch="dam" editor="damage" type="int">
    The projectile &lt;damage&gt; significantly affects the damage
    done. Damage can be further increased by the shooting
    weapon's attributes.
  </attribute>
  <attribute arch="wc" editor="weaponclass" type="int">
    This value is supposed to be the base &lt;weaponclass&gt;,
    but it seems to have rather little effect.
    High values are good here, low values bad.
  </attribute>
  <attribute arch="food" editor="chance to break" type="int">
    The &lt;chance to break&gt; defines the breaking probability when this
    projectile hits an obstacle, e.g. wall or monster.
    The value is the %-chance to break, ranging from 0 (never breaking)
    to 100 (breaking at first shot).
  </attribute>
  <attribute arch="magic" editor="magic bonus" type="int">
    Magic bonus increases chance to hit and damage a little bit.
  </attribute>
  <attribute arch="unique" editor="unique item" type="bool">
    Unique items exist only one time on a server. If the item
    is taken, lost or destroyed - it's gone for good.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  <attribute arch="no_drop" editor="don't drop" type="bool">
    When a monster carries a projectile with &lt;don't drop&gt;,
    this item will never drop to the ground but
    vanish instead. If this object is shot, it can still drop
    after hitting an obstacle. You can prevent this by
    setting &lt;chance to break&gt; 100.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may describe the projectile. This
    could be nice for very special ones.
  </attribute>
</type>

<!--####################################################################-->
<type number="70" name="Ring">
  <import_type name="Amulet" />
  <description><![CDATA[
    Rings are worn on the hands - one ring each.
    Wearing rings, the object's stats will directly be inherited to
    the player. Usually enhancing his spellcasting potential. ]]>
  </description>
  <use><![CDATA[
    When you create an artifact ring, never forget that players can
    wear <B>two</B> rings! Due to that it is extremely important to
    keep rings in balance with the game.
    <br><br>
    Also keep in mind that rings are generally the wizard's tools.
    They should primarily grant bonuses to spellcasting abilities
    and non-physical resistances. ]]>
  </use>
</type>

<!--####################################################################-->
<type number="3" name="Rod">
  <ignore>
    <attribute arch="title" />
  </ignore>
  <description><![CDATA[
    A rod contains a spell. The player can use this spell by applying and
    fireing the rod. Rods need time to regenerate their "internal" spellpoints,
    lowering the effectiveness in combat. But unlike wands/scrolls, rods can be
    used endlessly. ]]>
  </description>
  <use><![CDATA[
    Rods with healing/curing spells are extremely powerful. Usually, potions have
    to be used for that purpose. Though, potions are expensive and only good for
    one-time-use.<br> ]]>
  </use>
  <attribute arch="sp" editor="spell" type="spell">
    Sets the &lt;spell&gt; of the rod. Consider twice before handing out special
    rods to players, since they can be used endlessly without any mana cost!
    Rods with heal/ restoration/ protection spells, IF available, MUST be
    very very VERY hard to get!
  </attribute>
  <attribute arch="level" editor="casting level" type="int">
    The casting level of the &lt;spell&gt; determines it's power.
    For attack spells, level should be set to something reasonable.
  </attribute>
  <attribute arch="hp" editor="initial spellpoints" type="int">
    This value represents the initial amount of spellpoints in the rod.
    Naturally, this is quite unimportant.
  </attribute>
  <attribute arch="maxhp" editor="max. spellpoints" type="int">
    When the rod is fully charged up, it will hold this maximum amount of
    spellpoints. Make sure it is enough to cast the contained spell at least
    once. But don't set the value too high, as that might make the rod
    too effective.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may contain a description of the rod.
  </attribute>
</type>

<!--####################################################################-->
<type number="154" name="Rune">
  <ignore>
    <attribute arch="no_pick" />
    <attribute arch="title" />
    <attribute arch="name_pl" />
    <attribute arch="weight" />
    <attribute arch="value" />
    <attribute arch="material" />
    <attribute arch="unpaid" />
  </ignore>
  <description><![CDATA[
    A rune is a magical enscription on the dungeon floor.
    <br><br>
    Runes hit any monster or person who steps on them for 'dam' damage in
    'attacktype' attacktype. Alternatively, the rune could contain any spell,
    and will cast this spell when it detonates. Yet another kind is the
    "summoning rune", summoning predefined monsters of any kind, at detonation.
    <br><br>
    Many runes are already defined in the archetypes. ]]>
  </description>
  <use><![CDATA[
    Avoid monsters stepping on your runes. For example, summoning runes
    together with spellcasting- and  attack-runes is usually a bad idea. ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  &move_on;
  <attribute arch="level" editor="rune level" type="int">
    This value sets the level the rune will cast the spell it contains at,
    if applicable. A level 99 rune casts a very, very mean spell of whatever.
    (&lt;rune level&gt; 0 runes won't detonate at all!)

    Level Also effects how easily a rune may be found and disarmed, and
    how much experience the player gets for doing so. Beware: High level
    runes can be quite a cheap source of experience! So either make them
    tough, or keep the level low.
  </attribute>
  <attribute arch="Cha" editor="visibility" type="int">
    This value determines what fraction of the time the rune is visible:
    It'll be randomly visible 1/&lt;visibility&gt; of the time. Also effects
    how easily the rune may be found.
  </attribute>
  <attribute arch="hp" editor="number of charges" type="int">
    The rune will detonate &lt;number of charges&gt; times before disappearing.
  </attribute>
  <attribute arch="dam" editor="direct damage" type="int">
    &lt;direct damage&gt; specifies how much damage is done by the rune,
    if it doesn't contain a spell. This should be set in reasonable
    relation to the rune's level.
  </attribute>
  <attribute arch="attacktype" editor="attacktype" type="bitmask_attacktype">
    If there isn't any spell (and &lt;summon monster&gt; is unset), this
    attribute defines what attacktype to use for direct damage when
    the rune detonates.
  </attribute>
<section name="spellcraft">
  <attribute arch="sp" editor="spell" type="spell">
    The selected &lt;spell&gt; defines the spell in the rune, if any.
    (Many runes do direct damage).
  </attribute>
  <attribute arch="slaying" editor="spell name" type="string">
    Name of the spell in the rune, if any. &lt;spell name&gt; is optional,
    but if present, overrides the &lt;spell&gt; setting.
  </attribute>
  <attribute arch="other_arch" editor="spell arch" type="string">
    This string defines the spell in the rune, if any. &lt;spell arch&gt;
    is optional, but if present, overrides the &lt;spell&gt; setting.
    You can choose any of the existing arches.
  </attribute>
  <attribute arch="maxsp" editor="direction" type="list_direction">
    If set, the rune will cast it's containing spell (if any) in
    this &lt;direction&gt;.In most cases this appears useless because
    the spell directly hits the player.
  </attribute>
  <attribute arch="race" editor="summon monster" type="string">
    If this is set to the arch name of any monster, together with
    &lt;spell name&gt; "summon evil monster", the rune will summon a bunch
    of those on detonation. (dam and attacktype will still be ignored
    in this case). Runes are even capable of summoning multi-square
    monsters, given enough space. You'd better test it though.
  </attribute>
  <attribute arch="maxhp" editor="summon amount" type="int">
    This should only be set to a summoning rune. It will then summon
    that many creatures of the kind &lt;summon monster&gt;.
  </attribute>
</section>
  <attribute arch_begin="msg" arch_end="endmsg" editor="detonation text" type="text">
    When the rune detonates, this text is displayed to the
    victim. For especially powerful runes, create an appropriate
    thrilling description. ;)
  </attribute>
</type>

<!--####################################################################-->
<type number="106" name="Savebed">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    When the player applies a savebed, he is not only saved. Both his
    respawn-after-death and his word-of-recall positions are pointing
    to the last-applied savebed. ]]>
  </description>
  <use><![CDATA[
    Put savebed locations in towns, do not put them into dungeons.
    It is absolutely neccessary that a place with savebeds is 100% secure.
    That means:
    <UL>
    <LI> Monsters must not be able to reach the savebeds under any circumstances!
    <LI> If there are NPCs around, make sure they have the friendly-flag set.
    <LI> Insert a relyable exit! Make sure there is no possibility that
         players get trapped in a savebed location.
    <LI> If possible, mark the whole site as no-spell area (Insert this
         arch called "dungeon_magic" everywhere). This is not required,
         but it makes the place much more safe.
    </UL> ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="no_magic" value="1" type="fixed" />
  <attribute arch="damned" value="1" type="fixed" />
</type>

<!--####################################################################-->
<type number="111" name="Scroll">
  <ignore>
    <attribute arch="title" />
  </ignore>
  <description><![CDATA[
    Scrolls contain spells (similar to spell-potions). Unlike potions,
    scrolls require a certain literacy skill to read successfully.
    Accordingly, for a successful reading, a small amount of
    experience is gained. Scrolls allow only one time usage, but
    usually they are sold in bulks. ]]>
  </description>
  <use><![CDATA[
    For low level quests, scrolls of healing/curing-spells
    can be a nice reward. At higher levels, scrolls become less
    and less useful. ]]>
  </use>
  <attribute arch="level" editor="casting level" type="int">
    The spell of the scroll will be casted at this level.
    This value should always be set, at least to 1.
  </attribute>
  <attribute arch="sp" editor="spell" type="spell">
    When a player/monster applies this scroll, the selected &lt;spell&gt;
    will be casted (once). This should work for any given spell.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
</type>

<!--####################################################################-->
<type number="33" name="Shield">
  <import_type name="Amulet" />
  <description><![CDATA[
    Wearing a shield, the object's stats will directly be inherited to
    the player. Shields usually provide good defense, only surpassed
    by brestplate armour. Resistances on shields aren't uncommon either. ]]>
  </description>
  <use><![CDATA[
    Feel free to create your own special artifacts. However, it is very
    important that you keep your artifact in balance with existing maps. ]]>
  </use>
  <attribute arch="magic" editor="magic bonus" type="int">
    &lt;magic bonus&gt; works just like ac, except that it can be improved by
    "scrolls of Enchant Armour" or reduced by acid. It is less useful
    than direct armour-class bonus on the shield.
  </attribute>
</type>

<!--####################################################################-->
<type number="14" name="Shooting Weapon">
  <description><![CDATA[
    Shooting weapons like bows/crossbows are used to shoot projectiles
    (arrows/bolts). Shooting weapons and normal (melee) weapons can be
    wielded both at the same time. Like with any other equipment,
    stats/bonuses from shooting weapons are directly inherited to the player.
    <br><br>
    It's very easy to add new pairs of weapons &amp; projectiles.
    Just set matching &lt;ammunition class&gt; both for shooting
    weapon and projectile. ]]>
  </description>
  <use><![CDATA[
    Shooting weapons should not add bonuses in general. There's already
    enough "equipment-slots" doing that: swords, rings, amulets, girdles etc.
    Shooting weapons should especially not add bonuses to the player
    that have nothing to do with schooting. A Wisdom bonus on a bow
    is crap for example! A name like "Longbow of great Wisdom" doesn't help
    - still crap. ]]>
  </use>
  <attribute arch="race" editor="ammunition class" type="string">
    Only projectiles with matching &lt;ammunition class&gt; can be fired
    with this weapon. For normal bows set "arrows", for normal
    crossbows set "crossbow bolts".

    In certain cases, the ammunition class is displayed in the game.
    Hence, when you create a new ammunition class, choose an
    intuitive name like "missiles", "spirit bolts" - whatever.
  </attribute>
  <attribute arch="sp" editor="shooting speed" type="int">
    After shooting a projectile, the player is frozen for a short
    period of time (to prevent shooting arrows machine-gun-like).
    The greater &lt;shooting speed&gt;, the shorter this period of time.
    1 is minimum (=worst) and 100 is maximum (=best) value.

    You shouldn't set &lt;shooting speed&gt; lower than 10. YOU MUST NOT
    SET IT TO ZERO! (That would freeze the player for eternety).
  </attribute>
  <attribute arch="dam" editor="base damage" type="int">
    The &lt;base damage&gt; significantly affects the damage done
    by using this weapon. This damage is added to the projectile
    damage and then (if &lt;ignore strength&gt; disabled) a bonus
    according to the player's strength is added.
  </attribute>
  <attribute arch="wc" editor="weaponclass" type="int">
    This value is supposed to be the base &lt;weaponclass&gt;,
    but it seems to have rather little effect.
    High values are good here, low values bad.
  </attribute>
  <attribute arch="item_power" editor="item power" type="int">
    The &lt;item power&gt; value measures how "powerful" an artifact is.
    Players will only be able to wear equipment with a certain total
    amount of &lt;item power&gt;, depending on their own level. This is the
    only way to prevent low level players to wear "undeserved" equipment
    (like gifts from other players or cheated items).

    It is very important to adjust the &lt;item power&gt; value carefully
    for every artifact you create! If zero/unset, the CF server will
    calculate a provisional value at runtime, but this is never
    going to be an accurate measurement of &lt;item power&gt;.
  </attribute>
  <attribute arch="no_strength" editor="ignore strength" type="bool">
    Usually the player's strentgh takes effect on the damage
    done by the shooting weapon. If &lt;ignore strength&gt; is set,
    the player's strength is ignored.
  </attribute>
  <attribute arch="damned" editor="damnation" type="bool">
    A damned shooting weapon cannot be unwielded unless
    the curse is removed. Removing damnations is
    a tick harder than removing curses.
  </attribute>
  <attribute arch="cursed" editor="curse" type="bool">
    A cursed shooting weapon cannot be unwielded unless
    the curse is removed.
  </attribute>
  <attribute arch="unique" editor="unique item" type="bool">
    Unique items exist only one time on a server. If the item
    is taken, lost or destroyed - it's gone for good.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
<section name="stats">
  <attribute arch="Str" editor="strength" type="int">
    The player's strentgh will rise/fall by the given value
    while wearing this shooting weapon.
  </attribute>
  <attribute arch="Dex" editor="dexterity" type="int">
    The player's dexterity will rise/fall by the given value
    while wearing this shooting weapon.
  </attribute>
  <attribute arch="Con" editor="constitution" type="int">
    The player's constitution will rise/fall by the given value
    while wearing this shooting weapon.
  </attribute>
  <attribute arch="Int" editor="intelligence" type="int">
    The player's intelligence will rise/fall by the given value
    while wearing this shooting weapon.
  </attribute>
  <attribute arch="Pow" editor="power" type="int">
    The player's power will rise/fall by the given value
    while wearing this shooting weapon.
  </attribute>
  <attribute arch="Wis" editor="wisdom" type="int">
    The player's wisdom will rise/fall by the given value while
    wearing this shooting weapon.
  </attribute>
  <attribute arch="Cha" editor="charisma" type="int">
    The player's charisma will rise/fall by the given value
    while wearing this shooting weapon.
  </attribute>
</section>
<section name="bonus">
  <attribute arch="luck" editor="luck bonus" type="int">
    With positive luck bonus, the player is more likely to
    succeed in all sorts of things (spellcasting, praying,...).
    Unless the &lt;luck bonus&gt; is very high, the effect will be
    barely visible in-game. Luck bonus on one piece of equipment
    should never exceed 3, and such bonus should not be too
    frequently available.
  </attribute>
  <attribute arch="magic" editor="magic bonus" type="int">
    &lt;Magic bonus&gt; improves the quality of the shooting weapon.
    I'm not sure what exactly is increased - maybe weaponclass?
    However, &lt;magic bonus&gt; seems to have a little bit of positive
    influence on your chance to hit.
  </attribute>
</section>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text describes the weapons's "story". Every decent artifact weapon
    should have such a description.
  </attribute>
</type>

<!--####################################################################-->
<type number="68" name="Shop Floor">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Shop floor is used for shops. It acts like a combination of the
    common floor- and the treasure type: When the map is loaded,
    randomitems (depending on the setings) are generated on it.
    These items are all flagged as unpaid.
    When a player drops an item onto shop floor, the item becomes
    unpaid and the player receives payment according to the item's
    selling-value.
    Shopfloor always prevents magic (To hinder players from burning
    or freezing the goods). ]]>
  </description>
  <use><![CDATA[
    Tile your whole shop-interior space which shop floor.
    (That assures players receive payment for dropping items).
    Place shop mats to enter/leave the shop, and make sure
    there is no other exit than the shop mat. ]]>
  </use>
  <attribute arch="is_floor" value="1" type="fixed" />
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="no_magic" value="1" type="fixed" />
  <attribute arch="auto_apply" editor="generate goods" type="bool">
    If enabled, items will appear on this square when the map is loaded.
    You need to specify a &lt;treasurelist&gt; to define what kinds of items
    are generated. The items will be unpaid.
  </attribute>
  <attribute arch="randomitems" editor="treasurelist" type="treasurelist">
    This entry determines what kind of treasure will appear, when
    &lt;generate goods&gt; is enabled. Look into /crossfire/share/crossfire/treasures
    for details about existing treasurelists.
  </attribute>
  <attribute arch="exp" editor="quality level" type="int">
    The &lt;quality level&gt; will be used for the quality of the generated
    goods. If zero/unset, &lt;quality level&gt; 5 is used. Usually this value
    doesn't need to be set, unless you want extraordinarily good/bad
    quality. If you want to make a shop with very high quality, meaybe
    charge an entrance fee, or make the shop hard-to-come-by.
    Note that &lt;quality level&gt; mainly affects chance of magic bonus
    and appearance of artifact-items.
  </attribute>
  <attribute arch="damned" editor="no prayers" type="bool">
    If enabled, it is impossible for players to use prayers
    on that spot. It also prevents players from saving.
    (Remember that &lt;no magic&gt; is always set for shop floors.)
  </attribute>
</type>

<!--####################################################################-->
<type number="69" name="Shop Mat">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Shop mats are used for entering/leaving shops. You should always
    have exactly TWO shop mats on your shop-map: One inside the
    "shopping-area" and one outside. Shop mats don't use exit paths/
    or -destinations. When stepping onto a shopmat the player gets beamed
    to the nearest other mat. If the player has unpaid items in his
    inventory, the price gets charged from his coins automatically.
    If the player has insufficient coins to buy his unpaid items, he
    is unable to pass any shopmat (So he has to drop unpaid items). ]]>
  </description>
  <use><![CDATA[
    As stated above, always place TWO shop mats into your shop.
    Not more and not less than that. ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  &move_on;
</type>

<!--####################################################################-->
<type number="98" name="Sign &amp; MagicMouth">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    The purpose of a sign or magic_mouth is to display a certain message to
    the player. There are three ways to have the player get this message:
    The player walking onto it (-&gt; magic_mouth), the player pressing &lt;a&gt;pply
    (-&gt; sign) or the player triggering a button/handle/etc (-&gt; magic_mouth). ]]>
  </description>
  <use><![CDATA[
    Use signs and magic_mouths, plenty of them! Place magic_mouths to add
    some true roleplay feeling to your maps, support your storyline or give
    hints about hidden secrets/dangers. Place signs to provide the player
    with all kinds of useful information for getting along in your maps. ]]>
  </use>
  <attribute arch="connected" editor="connection" type="int">
    When a connection value is set, the message will be printed whenever
    the connection is triggered. This should be used in combination with
    &lt;invisible&gt; enabled and &lt;activate by walking/flying&gt; disabled.
    If activating your magic_mouth this way, the message will not only be
    printed to one player, but all players on the current map.
  </attribute>
  &activate_on;
  &move_on;
  <attribute arch="food" editor="counter" type="int">
    If a counter-value is set (greater zero), the sign/magic_mouth can be applied
    (printing the message) only that many times. For signs this really shouldn't
    be used, while for magic_mouths it is extremely helpful.
    Monsters walking over the magic_mouth do not decrease the counter.

    Often, you might want to have a message displayed only one time. For example:
    The player enters your map and you put a magic_mouth to tell him about the
    monsters and how dangerous they look and all. Later, when all the monsters
    are killed and the player leaves the map, displaying the same message a
    second time would be silly. &lt;counter&gt; 1 does a perfect job in such cases.
    Otherwise set &lt;counter&gt; zero/unset for infinite use (that is the default).
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="message" type="text">
    This text will be displayed to the player.
  </attribute>
</type>

<type number="150" name="Shop Inventory">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[The purpose of a sign is to display the contents of a shop.]]>
  </description>
  <use><![CDATA[Use these signs to present the player a list of the items in the shop]]>
  </use>
  <attribute arch="shop_coords" editor="shop rectangle" type="string">
     The format of this field is: 'x1,y1,x2,y2'. It defines a rectangle on
     the map that will be searched for unpaid items.
  </attribute>
</type>

<!--####################################################################-->
<type number="43" name="Skill">
  <ignore>
    <ignore_list name="system_object" />
  </ignore>
  <description><![CDATA[
    Skills are objects which exist in the player/monster inventory.
    Both NPC/monsters and players use the same skill archetypes. Not all skills
    are enabled for monster use however. ]]>
  </description>
  <use><![CDATA[
    For mapmaking, Skill objects serve two purposes:
    <p>First, the predefined skill archtypes (in the 'skills' directory)
    can be seen as the global skill definitions. A skill which doesn't
    exists as an archtype cannot be learned or used by players. When you
    want to use skills in your maps, you may need to look up the &lt;skill name&gt;s
    of defined skill archtypes, because those strings are used as a reference in
    many skill-related objects.
    </p><p>
    Secondly, in order to enable monsters to use skills, you will need to
    copy default skill archtypes into the monsters' inventories.
    You can even customize the skills by changing stats. It is not
    recommended however, to use skills in your maps which are totally
    unrelated to any predefined skill archtype.</p> ]]>
  </use>
  <attribute arch="invisible" value="1" type="fixed" />
  <attribute arch="no_drop" value="1" type="fixed" />
  <attribute arch="skill" editor="skill name" type="string">
    The &lt;skill name&gt; is used for matchings. When a usable
    object has an identical &lt;skill name&gt;, players
    (or monsters) will need this skill to apply/use the object.
  </attribute>
  <attribute arch="expmul" editor="exp multiplier" type="float">
    This is the ratio of experience the players total should increase by
    when this skill is used.  If this is zero, then experience only goes to
    to the skill.  Values higher than 1 are allowed.  Note that experience
    rewarded to the players total is in addition to that given to the
    skill.  Eg, if player should get 500 exp for using a skill, and
    expmul is 1, the player will get 500 added to that skill as well as
    500 to their total.
  </attribute>
  <attribute arch="subtype" editor="skill type" type="list_skill_type">
    The &lt;skill type&gt; defines the base functionality of the skill.
    Skill types are hardcoded in the Crossfire server. It isn't hard to
    create new skill types, but it requires a bit of server-coding.
  </attribute>
  <attribute arch="level" editor="level" type="int">
  </attribute>
  <attribute arch="exp" editor="experience" type="int">
  </attribute>
  <attribute arch="can_use_skill" editor="is native skill" type="bool">
    The &lt;is native skill&gt; flag has an effect only when this
    skill object is placed in the inventory of a monster (or player).
    If it is set, the monster or player knows the skill natively, which
    means he does not need a skill tool to use it.
  </attribute>
</type>

<!--####################################################################-->
<type number="130" name="Skill Scroll">
  <description><![CDATA[
    By reading a skill scroll, a player has a chance to learn the
    contained skill. ]]>
  </description>
  <use><![CDATA[
    Skill scrolls are very much sought for by players. Currently,
    all skill scrolls are sold in shops randomly, which is in fact not
    a good system. It would be nice to have some cool quests with
    skill scrolls rewarded at the end. ]]>
  </use>
  <attribute arch="race" value="scrolls" type="fixed" />
  <attribute arch="skill" editor="skill name" type="string">
    The &lt;skill name&gt; matches the skill object that can
    be learned from this scroll.
  </attribute>
</type>

<!--####################################################################-->
<type number="21" name="Special Key">
  <ignore>
    <attribute arch="material" />
  </ignore>
  <description><![CDATA[
    When carrying the appropriate special key, a locked door can
    be opened. The key will dissapear.
    <br><br>
    This object-type can also be used for "passport"-like items:
    When walking onto an invetory checker, a gate for example might
    get opened. The "passport" will stay in the player's inventory. ]]>
  </description>
  <use><![CDATA[
    How to make a "passport": You take the special key arch
    (archetype name is "key2"), set the face to something like
    card.111 and the name to "passport" - that's all. The &lt;key string&gt;
    certainly must match with the appropiate inventory checker.
    <br><br>
    Of course you can be creative with names and faces of
    key-objects. A "mysterious crystal" or a "big dragon claw"
    (with appropriate faces) appear more interesting than just
    a "strange key", or "passport". ]]>
  </use>
  <attribute arch="slaying" editor="key string" type="string">
    This string must be identical with the &lt;key string&gt; in the
    locked door, then it can be unlocked. It can also be used
    to trigger inventory checkers.
  </attribute>
  <attribute arch="material" editor="material" type="bitmask_material">
    For Special Keys, material should always be unset or set
    to Adamantite. This prevents the key from getting
    burned or otherwise destroyed.
  </attribute>
  <attribute arch="unique" editor="unique item" type="bool">
    Unique items exist only one time on a server. If the item
    is taken, lost or destroyed - it's gone for good.

    This can be used if you want to sell apartments on your
    map: Simply sell a unique passport/key, and place
    an inventory checker at the entrance of your apartment.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This will add a description to the object. The player can read
    this text by clicking on the item in his inventory. Use this
    message to describe what the key/passport is good for. A player
    might have 50 different keys on his key-ring. Don't expect
    players to recall their purpose just by their names.
  </attribute>
</type>

<!--####################################################################-->
<type number="101" name="Spell">
  <ignore>
    <ignore_list name="system_object" />
  </ignore>
  <description><![CDATA[
    Spell objects define a spell. When a spell is put in a spellbook,
    players can learn it by reading the book. Once learned, players
    can use the spell as often as they like. With increasing skill level
    of the player, spells may gain power but also increase cost.<br>
    Monsters can use spells which are put in their inventory (provided
    that certain "enabling" settings are correct). The monster's
    &lt;treasurelist&gt; can also be used to provide it with spells. ]]>
  </description>
  <use><![CDATA[
    A lot of the spells' settings can be tuned and customized.
    When creating new spells which are accessible to players, it is
    important to think about balance. A single spell which is too
    powerful and/or too easy to use can eventually toss the whole skill
    and magic school system out of whack. Testing new spells is
    quite important therefore. ]]>
  </use>
  <attribute arch="no_drop" value="1" type="fixed" />
  <attribute arch="invisible" value="1" type="fixed" />
  <attribute arch="skill" editor="skill name" type="string">
    The &lt;skill name&gt; matches the skill which is needed
    to cast this spell. This should be one out of "sorcery",
    "pyromancy", "evocation", "summoning" or "praying".
    If you want to fiddle with these, please take care not
    to upset the concept and balance of the various skills.
  </attribute>
  <attribute arch="subtype" editor="spell type" type="list_spell_type">
    The &lt;spell type&gt; defines the basic type of spell.
    Some of these types are of a more generic nature than others.
  </attribute>
  <attribute arch="level" editor="spell level" type="int">
  </attribute>
  <attribute arch="casting_time" editor="casting time" type="int">
  </attribute>
  <attribute arch="duration" editor="duration" type="int">
  </attribute>
  <attribute arch="other_arch" editor="create object" type="string">
  </attribute>
  <attribute arch="sp" editor="cost spellpoints" type="int">
  </attribute>
  <attribute arch="grace" editor="cost grace" type="int">
  </attribute>
  <attribute arch="maxsp" editor="double cost per level" type="int">
  </attribute>
</type>

<!--####################################################################-->
<type number="85" name="Spellbook">
  <description><![CDATA[
    By reading a spellbook, the player has a chance of learning the
    contained spell. Once learned from a book, the spell is available
    forever. Spellbooks with high level spells require some skill-level
    to read.<br><br>
    You can create widely customized spells only by adjusting the
    spell object in the spellbooks inventory. Refer to the description
    of spell objects for detailed information how to customize spells.<br>
    If you want to have a random spellbook instead, choose a &lt;treasurelist&gt;
    with a compilation of spells that the book may contain. ]]>
  </description>
  <use><![CDATA[
    Don't put any of the godgiven spells into a spellbook! These are
    reserved for the followers of the appropriate cults. Handing them
    out in a spellbook would violate the balance between different religions.
    <br><br>
    Note that there is no fundamental difference between the spellbooks
    of varying schools (pyromancy, sorcery, evocation, summoning, and
    even praying). The difference lies only in the spells they contain.
    It is up to you, the mapmaker, to pick the right type of book
    for your spells. ]]>
  </use>
  <attribute arch="skill" value="literacy" type="fixed" />
  <attribute arch="randomitems" editor="treasurelist" type="treasurelist">
    There are two ways to put spells into a spellbook:
    1. Put a spell object in the books inventory. In this case,
       treasurelist must be set to &lt;none&gt;.
    2. Choose a treasurelist which contains spells.
       In that way, a spell will be chosen randomly from the list.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may contain a nice description
    of the spellbook's cover or something.
  </attribute>
</type>

<!--####################################################################-->
<type number="90" name="Spinner">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Spinners change the direction of spell objects and other projectiles
    that fly past. Unlike directors, it does make a difference from what
    angle you shoot into the spinner. The direction of objects flying past
    is always changed by a certain degree. ]]>
  </description>
  <use><![CDATA[
    Spinners are very rarely used. I believe they are quite
    confusing and pointless. The only use I can think of is building
    some puzzle about where to shoot into spinners to shoot somewhere you
    otherwise couldn't.

    When placing spinners on a map with magic walls, make sure the spell-
    projectiles from magic walls don't get to fly in loops. ]]>
  </use>
  <attribute arch="sp" editor="direction number" type="int">
    The spinner will change the direction of flying objects by
    45 degrees per &lt;direction number&gt;. Negative values spin clockwise,
    positive values counter clockwise.

    Example: &lt;direction number&gt; -2 means spin 90 degrees clockwise.
  </attribute>
  &move_on;
</type>

<!--####################################################################-->
<type number="138" name="Swamp">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Swamp areas show a special behaviour:
    When a player stands still on a swamp-square for too long,
    he will start to sink in and eventually drown and die.
    Items dropped on the swamp sink in and dissapear.
    Players with knowledge of the woodsman skill are a lot less likely
    to die in the swamp. ]]>
  </description>
  <attribute arch="is_floor" value="1" type="fixed" />
  <attribute arch="is_wooded" value="1" type="fixed" />
  <attribute arch="speed" editor="drowning speed" type="float">
    The higher the &lt;drowning speed&gt;, the faster will players and items
    sink into the swamp. Swamp with very high &lt;drowning speed&gt; can be a nasty
    and unexpected death-trap. Players should get a warning before such areas.
  </attribute>
  &speed_left;
  &move_on;
  &movement_types_terrain;
  <attribute arch="no_magic" editor="no spells" type="bool">
    If enabled, it is impossible for players to use (wizard-)
    spells on that spot.
  </attribute>
  <attribute arch="damned" editor="no prayers" type="bool">
    If enabled, it is impossible for players to use prayers
    on that spot. It also prevents players from saving.
  </attribute>
</type>

<!--####################################################################-->
<type number="41" name="Teleporter">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    When the player walks into a teleporter, he is transferred to a
    different location. The main difference to the object-type exit
    is the possibility to have teleporters connected to levers/buttons/etc.
    Sometimes teleporters are activated even against the players will.
    <br><br>
    Unlike exits, teleporters can also transfer items and
    monsters to different locations on the same map. ]]>
  </description>
  <use><![CDATA[
    When creating maps, I guess sooner or later you'll want to have
    an invisible teleporter. If using "invisible 1", the teleporter
    can still be discovered with the show_invisible spell. And in
    some cases you can't place it under the floor to prevent this.
    <br><br>
    Fortunately, there is a cool trick to make a perfectly invisible
    teleporter: You simply add teleporter functionality to the floor
    itself. That means: You take the floor arch (e.g. "flagstone"),
    set "type 41", and add slaying/hp/sp/connected... everything you need. ]]>
  </use>
  <attribute arch="slaying" editor="exit path" type="string">
    The exit path specifies the map that the player is transferred to.
    &lt;exit path&gt; can be an absolute path, beginning with '/'
    (for example "/peterm/FireTemple/fire1"). It can also be a relative
    path, not beginning with '/' (On the map "/peterm/FireTemple/Fire2"
    for example I could use the relative path "Fire1"). Use relative
    paths whenever possible! Note that upper/lower case must always be
    set correctly. However, please use lower case only.

    If the &lt;exit path&gt; is set, ONLY players can get teleported. If the
    &lt;exit path&gt; is unset (empty), anything can get teleported: Players,
    monsters and items. In this case, the destined map is automatically
    the same map the teleporter is on.
  </attribute>
  <attribute arch="hp" editor="destination X" type="int">
    The exit destinations define the (x, y)-coordinates where the exit
    leads to.

    If both are set to zero and &lt;exit path&gt; is empty, the player will
    get teleported to another, randomly chosen teleporter on the same
    map (Slightly confusing for the player though). Make sure there
    actually *is* a second one in that case.

    If both are set to zero and &lt;exit path&gt; is set, the player will
    be transferred to the "default enter location" of the destined map.
    The latter can be set in the map-properties as "Enter X/Y". Though,
    please DO NOT use that. It turned out to be a source for numerous
    map-bugs.
  </attribute>
  <attribute arch="sp" editor="destination Y" type="int">
    The exit destinations define the (x, y)-coordinates where the exit
    leads to.

    If both are set to zero and &lt;exit path&gt; is empty, the player will
    get teleported to another, randomly chosen teleporter on the same
    map (Slightly confusing for the player though). Make sure there
    actually *is* a second one in that case.

    If both are set to zero and &lt;exit path&gt; is set, the player will
    be transferred to the "default enter location" of the destined map.
    The latter can be set in the map-properties as "Enter X/Y". Though,
    please DO NOT use that. It turned out to be a source for numerous
    map-bugs.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    If a connection value is set, the teleporter will be activated
    whenever the connection is triggered. To use this properly,
    &lt;activation speed&gt; must be zero.
  </attribute>
  &activate_on;
  <attribute arch="speed" editor="activation speed" type="float">
    If the &lt;activation speed&gt; is nonzero, the teleporter will
    automatically be activated in regular time-intervals. Hence, the
    player can just step on it and gets teleported sooner or later.
    The duration between two activates depends on the given value.
    Default in the teleporter arch is &lt;activation speed&gt; 0.1.

    VERY IMPORTANT: If you want to have your teleporter activated via
    button/handle/magic_ear/etc, you must set &lt;activation speed&gt; to zero!
  </attribute>
  &speed_left;
</type>

<!--####################################################################-->
<type number="26" name="Timed Gate">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Gates play an important role in Crossfire. Gates can be opened
    by activating a button/trigger, by speaking passwords (-> magic_ear)
    or carrying special key-objects (-> inventory checker).
    Unlike locked doors, gates can get shut again after a player has
    passed, which makes them more practical in many cases. Unlike normal
    gates, timed gates open when triggered but automatically close again
    after some time.]]>
  </description>
  <use><![CDATA[
    Use gates to divide your maps into separated areas. After solving
    area A, the player gains access to area B, and so on. Make your
    maps more complex than "one-way". ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="connected" editor="connection" type="int">
    Whenever the inventory checker is triggered, all objects with identical
    &lt;connection&gt; value get activated. This only makes sense together with
    &lt;blocking passage&gt; disabled. If unset, the gate opens automatically
    after some time.
  </attribute>
  &activate_on;
  <attribute arch="wc" editor="position state" type="int">
    The &lt;position state&gt; defines the position of the gate:
    Zero means completely open/down, the "number of animation-steps" (usually
    about 6 or 7) means completely closed/up state. I suggest you don't
    mess with this value - Leave the default in place.
  </attribute>
  &movement_types_terrain;
  <attribute arch="no_magic" editor="restrict spells" type="bool">
    Restricting the use of spells to pass this gate. This has
    an effect only if &lt;block view&gt; is disabled.
  </attribute>
  <attribute arch="damned" editor="restrict prayers" type="bool">
    Restricting the use of prayers to pass this door. This has
    an effect only if &lt;block view&gt; is disabled.
  </attribute>
  <attribute arch="hp" editor="open duration" type="int">
    Defines the duration the gate remains closed. This only takes effect
    if the gate is not connected.
  </attribute>
</type>

<!--####################################################################-->
<type number="155" name="Trap">
  <ignore>
    <attribute arch="no_pick" />
    <attribute arch="title" />
    <attribute arch="name_pl" />
    <attribute arch="weight" />
    <attribute arch="value" />
    <attribute arch="material" />
    <attribute arch="unpaid" />
  </ignore>
  <description><![CDATA[
    A trap is a object that can either do damage or trigger another connected object
	when detonated. Traps are like runes except they are not magical in nature,
	and generally have either a physical attack or trigger a reaction.
    <br><br>
    Traps hit any monster or person who steps on them for 'dam' damage in
    'attacktype' attacktype and/or trigger a reaction.
    <br><br>
    Many traps are already defined in the archetypes.]]>
  </description>
  <use><![CDATA[
    Avoid monsters stepping on your traps. For example, a party of orcs setting
    off your lightning wall and pit trap is usually a bad idea.]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  &move_on;
  <attribute arch="level" editor="trap level" type="int">
    Level  effects how easily a trap may be found and disarmed, and
    how much experience the player gets for doing so. Beware: High level
    traps can be quite a cheap source of experience! So either make them
    tough, or keep the level low.
  </attribute>
  <attribute arch="Cha" editor="visibility" type="int">
    This value determines what fraction of the time the trap is visible:
    It'll be randomly visible 1/&lt;visibility&gt; of the time. Also effects
    how easily the trap may be found.
  </attribute>
  <attribute arch="hp" editor="number of charges" type="int">
    The trap will detonate &lt;number of charges&gt; times before disappearing.
  </attribute>
  <attribute arch="dam" editor="direct damage" type="int">
    &lt;direct damage&gt; specifies how much damage is done by the trap.
	This should be set in reasonable relation to the trap's level.
  </attribute>
  <attribute arch="attacktype" editor="attacktype" type="bitmask_attacktype">
    This attribute defines what attacktype to use for direct damage when
    the trap detonates.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
    When the trap is detonated, all objects with the same
    connection value get activated.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="detonation text" type="text">
    When the trap detonates, this text is displayed to the
    victim. For especially powerful or complex traps, create an appropriate
    and thrilling description. ;)
  </attribute>
</type>

<!--####################################################################-->
<type number="95" name="Trapdoor">
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    Trapdoors are very similar to pits. The difference is that they
    can not be closed. Instead, the weight of the object on the
    trapdoor determines weither it slams the trapdoor open and falls through
    or not.<br>
    Once a trapdoor has been opened (by a creature or items of sufficient
    weight,) it remains open, acting like an opened pit. ]]>
  </description>
  <use><![CDATA[
    Trapdoors should be used in the same fashion as pits:
    They should always drop the victims to some kind of lower level. They
    are not supposed to be used to randomly interconnect maps like teleporters. ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  &move_on;
  <attribute arch="weight" editor="hold weight" type="int">
    This value defines how much weight the trapdoor can hold.
    Once items or creatures are gathered on the trapdoor, with
    a total weight surpassing this value, then the trapdoor will
    open and things start falling through.
  </attribute>
  <attribute arch="hp" editor="destination X" type="int">
    The trapdoor will transport creatures (and items) randomly into
    a two-square radius of the destination coordinates.
    If the destination square becomes blocked, the trapdoor will act like
    being filled up and not work anymore!
  </attribute>
  <attribute arch="sp" editor="destination Y" type="int">
    The trapdoor will transport creatures (and items) randomly into
    a two-square radius of the destination coordinates.
    If the destination square becomes blocked, the trapdoor will act like
    being filled up and not work anymore!
  </attribute>
</type>

<!--####################################################################-->
<type number="4" name="Treasure">
  <ignore>
    <attribute arch="nrof" />
    <attribute arch="title" />
    <attribute arch="name_pl" />
    <attribute arch="weight" />
    <attribute arch="value" />
    <attribute arch="material" />
  </ignore>
  <description><![CDATA[
    A treasure-object turns into certain randomitems when the map is loaded
    into the game. ]]>
  </description>
  <use><![CDATA[
    About usage of the "random-artifact" treasurelist:
    This will generate powerful stuff like girdles, xray helmets, special
    swords etc. If you put this as reward to your quest, players might be
    motivated to do it more than once. BUT, by doing so they will get a huge
    number of different artifacts! Besides, players will always seek the place
    with the most easy-to-get random artifact and ignore all others.
    My advice: Don't use it! Attract players with good fighting experience
    (from monsters), potions, spellbooks, money, and non-random artifacts.  ]]>
  </use>
  <attribute arch="randomitems" editor="treasurelist" type="treasurelist">
    This entry determines what kind of treasure will appear. Look into
    /crossfire/share/crossfire/treasures for details about existing
    treasurelists.
  </attribute>
  <attribute arch="auto_apply" editor="auto-generate" type="bool">
    "Auto-generate" must be set in order to have the treasure be created
    when the map is loaded.
    If you want to create a random treasure chest, you unset this flag.
    That way, the player has to apply the object (the chest), then the
    treasure is generated.
  </attribute>
  <attribute arch="hp" editor="create number" type="int">
    "Create number" specifies how many pieces of the given treasurelist
    will appear. Note that for every piece there is a chance that nothing is
    generated. Also, sometimes there can be stacks of items generated, like
    for gems/money.
  </attribute>
  <attribute arch="exp" editor="quality level" type="int">
    The &lt;quality level&gt; will be used for the quality of the generated
    treasure instead of the map difficulty (as was done with shops).
    If zero/unset, the map difficulty will instead be used.
    (Example for comparison: Shop floors generate treasure of
    &lt;quality level&gt; 5 per default).
  </attribute>
</type>

<!--####################################################################-->
<type number="52" name="Trigger Marker">
  <ignore>
    <ignore_list name="system_object" />
  </ignore>
  <description><![CDATA[
    A trigger marker is an object that inserts an invisible force (a mark) into a
    player stepping on it WHEN TRIGGERED. This force does nothing except containing a
    &lt;key string&gt; which can be discovered by detectors or inventory
    checkers. It is also possible to use markers for removing marks again.
    <br><br>
    Note that the player has no possibility to "see" his own marks,
    except by the effect that they cause on the maps. ]]>
  </description>
  <use><![CDATA[
    Markers hold real cool possibilities for map-making. I encourage
    you to use them frequently. However there is one negative point
    about markers: Players don't "see" what's going on with them. It is
    your task, as map-creator, to make sure the player is always well
    informed and never confused.
    <br><br>
    Please avoid infinite markers when they aren't needed. They're
    using a little space in the player file after all, so if there
    is no real purpose, set an expire time. ]]>
  </use>
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="slaying" editor="key string" type="string">
    The &lt;key string&gt; can be detected by inv. checkers/detectors.
    If the player already has a force with that &lt;key string&gt;,
    there won't be inserted a second one.
  </attribute>
  <attribute arch="connected" editor="connection" type="int">
   Unlike a regular marker this is the connection that triggers this marker to activate.
  </attribute>
  <attribute arch="food" editor="mark duration" type="int">
    This value defines the duration of the force it inserts.
    If nonzero, the duration of the player's mark is finite:
    about 1 food per 10 seconds. &lt;mark duration&gt; zero/unset
    means the mark will stay on the player forever.
  </attribute>
  <attribute arch="name" editor="delete mark" type="string">
    When the player steps onto the marker, all existing forces in
    the players inventory with a &lt;key string&gt; matching &lt;delete mark&gt;
    will be removed. If you don't want to remove any marks, leave
    this textfield empty.

    Note that the string &lt;delete mark&gt; is set as the name of
    this marker. So don't be confused, and remember changing the
    name will take effect on the marker's functionality.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="marking message" type="text">
    In the moment when the player gets marked, this text is displayed
    to him. You should really set a message in any marker you create,
    because it's the only way for the player to notice what's going on.
  </attribute>
</type>

<!--####################################################################-->
<type number="0" name="Wall">
  <required>
    <attribute arch="is_floor" value="0" />
    <attribute arch="alive" value="0" />
    <attribute arch="no_pass" value="1" />
  </required>
  <ignore>
    <attribute arch="nrof" />
    <attribute arch="title" />
    <attribute arch="name_pl" />
    <attribute arch="value" />
    <attribute arch="unpaid" />
  </ignore>
  <description><![CDATA[
    Walls usually block passage and sight. ]]>
  </description>
  &movement_types_terrain;
  <attribute arch="can_roll" editor="moveable" type="bool">
    If set, the object is able to "roll", so it can be pushed around.
    This setting is used for boulders and barrels.
  </attribute>
  <attribute arch="no_magic" editor="restrict spells" type="bool">
    This takes effect only with &lt;blocksview&gt; disabled.
    Restricting the use of spells to pass this wall.
  </attribute>
  <attribute arch="damned" editor="restrict prayers" type="bool">
    This takes effect only with &lt;blocksview&gt; disabled.
    Restricting the use of spells to pass this wall.
  </attribute>
</type>

<!--####################################################################-->
<type number="109" name="Wand &amp; Staff">
  <description><![CDATA[
    Wands contain a certain spell. The player can apply (ready) and
    fire the wand. After a defined number of casts, the wand is
    "used up". It is possible to recharge a wand with scrolls of
    charging, but usually that isn't worth the cost. ]]>
  </description>
  <use><![CDATA[
    Wands are quite seldomly used. The reason prolly is that they're
    generally not cost-efficient. Handing out high-level wands with
    powerful special spells isn't a good idea either, because of
    the recharge ability.
    <br><br>
    For low levels, staffs of healing/cure and word of recall are
    quite desirable though. Ideal rewards for low level quests. ]]>
  </use>
  <attribute arch="sp" editor="spell" type="spell">
    The &lt;spell&gt; specifies the contained spell.
  </attribute>
  <attribute arch="level" editor="casting level" type="int">
    The &lt;casting level&gt; of the wand determines it's power.
    An average level for wands in shops is about 10.
  </attribute>
  <attribute arch="food" editor="number of charges" type="int">
    The wand can be used &lt;number of charges&gt; times before it is
    used up. It can be recharged with scrolls of charging.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text may contain a description of the wand.
  </attribute>
</type>

<!--####################################################################-->
<type number="0" name="Weak Wall">
  <required>
    <attribute arch="is_floor" value="0" />
    <attribute arch="alive" value="1" />
    <attribute arch="tear_down" value="1" />
  </required>
  <ignore>
    <ignore_list name="non_pickable" />
  </ignore>
  <description><![CDATA[
    A weak wall is a breakable spot amidsts a solid wall. Typically
    these weak walls look similar to their solid "relatives" except
    for a small crack or little chunks of wall on the ground. ]]>
  </description>
  <use><![CDATA[
    If you want to create hidden rooms, using weak walls is alot
    better than completely indiscernible passages in a wall.<br>
    Anyways, there can be a lot more to weak walls than just finding
    them: Rising their defensive stats, weak walls can become a
    serious obstacle. An ice wall might only be torn down by a fire
    attack for example. A granite wall for instance might be very
    hard to destroy. ]]>
  </use>
  <attribute arch="alive" value="1" type="fixed" />
  <attribute arch="no_pick" value="1" type="fixed" />
  <attribute arch="tear_down" value="1" type="fixed" />
  <attribute arch="race" editor="race" type="string">
    For weak walls, &lt;race&gt; should always be set to "wall",
    unless you create something fancy like a building which
    is in fact meant to be a huge animal.
    Note that shovels slay walls, so they do tripple damage
    against weak walls.
  </attribute>
  <attribute arch="level" editor="level" type="int">
    The &lt;level&gt; of a weak wall works similar to monster levels.
    Due to the fact that weak walls cannot attack, the level
    is much less important though.
  </attribute>
  <attribute arch="hp" editor="health points" type="int">
    The &lt;health points&gt; of a weak wall define how long it takes to
    tear it down. With every successful hit from an opponent,
    &lt;health points&gt; get drained.
  </attribute>
  <attribute arch="maxhp" editor="max health" type="int">
    &lt;max health&gt; is the maximum amount of &lt;health points&gt; this
    weak wall can have. Since walls generally don't heal, I doubt
    this has much real effect.
  </attribute>
  <attribute arch="ac" editor="armour class" type="int">
    Weak walls of high &lt;armour class&gt; are less likely to get hit.
    &lt;armour class&gt; can be considered the "counterpiece" to &lt;weapon class&gt;.
  </attribute>
  &resistances_basic;
</type>

<!--####################################################################-->
<type number="15" name="Weapon">
  <description><![CDATA[
    Wielding a weapon, the object's stats will directly be inherited to the
    player. Usually enhancing his fighting-abilities. Non-magical weapons can
    be improved with scrolls. ]]>
  </description>
  <use><![CDATA[
    If you create artifacts (equipment) with stats- or resistance-bonus:
    Keep playbalance in mind! Such items mustn't be reachable without hard
    fighting AND questing. ]]>
  </use>
  <attribute arch="attacktype" editor="attacktype" type="bitmask_attacktype">
    This number is a bitmask, specifying the weapon's attacktypes.
    Attacktypes are: physical, magical, fire, cold.. etc. Most artifact weapons
    have no more than one or two attacktypes. Keep in mind that all weapons
    can be blessed by the player's diety, thus adding an additional attacktype.

    When a player hits a monster with a weapon that has more than one attacktype,
    then he will do as much damage as the "best" of his attacktypes does. So,
    the more attacktypes you've got, the better your chance to take advantage
    of a monster's vulnerabilities. (Btw: Same rule applies for monster vs.
    player.). Attacktypes "magic" and "chaos" are somehow exceptions.
  </attribute>
  <attribute arch="weapontype" editor="weapontype" type="list_weapon_type">
    The &lt;weapontype&gt; characterizes the weapon's type of physical
    attack. It could best be considered a "subclassification"
    of the physical attacktype. For now, this is only used for
    attack messages!

    You should always set this correctly when creating new
    weapons for your maps.
  </attribute>
  <attribute arch="skill" editor="skill name" type="string">
    Matching &lt;skill name&gt; of the skill that is required
    to use this weapon.
  </attribute>
  <attribute arch="dam" editor="damage" type="int">
    The damage value is used as base value for how much damage the weapon
    does per hit. The actual damage involves more dependencies,
    like wielder's level and defender's level. Look at existing weapons
    to get a feel for the range of weapon damage values.
  </attribute>
  <attribute arch="slaying" editor="slaying race" type="string">
    Slaying means the weapon does tripple (3x) damage to monsters of the
    specified race. If &lt;slaying race&gt; matches an arch name (e.g. "big_dragon"),
    only monsters of that archtype are hit with tripple damage.

    No god blessings are possible for weapons with a race set in this entry
    (That's because god blessings add tripple damage against their own
    enemy races). Tripple damage is very effective.
  </attribute>
  <attribute arch="last_sp" editor="weapon speed" type="int">
    The weapon speed determines how often the wielder can swing the weapon
    during a certain period of time. The lower the faster, &lt;weapon speed&gt; 1
    is best (that is lightning- fast). A typical average value is 8.
    Speed and damage should be kept in reasonable relation.
  </attribute>
  <attribute arch="wc" editor="weapon class" type="int">
    The weapon class value adds to the overall weapon class of the wielder's
    melee attacks. Weapon class improves the chance of hitting the opponent.
  </attribute>
  <attribute arch="magic" editor="magic bonus" type="int">
    For a weapon, magic bonus works just like weapon class, except that
    magic bonus can be improved by the gods or reduced by acid. Hence, it is
    less useful than direct weapon class value on a weapon.
  </attribute>
  <attribute arch="item_power" editor="item power" type="int">
    The &lt;item power&gt; value measures how "powerful" an artifact is.
    Players will only be able to wear equipment with a certain total
    amount of &lt;item power&gt;, depending on their own level. This is the
    only way to prevent low level players to wear "undeserved" equipment
    (like gifts from other players or cheated items).

    It is very important to adjust the &lt;item power&gt; value carefully
    for every artifact you create! If zero/unset, the CF server will
    calculate a provisional value at runtime, but this is never
    going to be an accurate measurement of &lt;item power&gt;.
  </attribute>
  <attribute arch="damned" editor="damnation" type="bool">
    A damned weapon cannot be unwielded unless
    the curse is removed. Removing damnations is
    a tick harder than removing curses.
  </attribute>
  <attribute arch="cursed" editor="curse" type="bool">
    A cursed weapon cannot be unwielded unless
    the curse is removed.
  </attribute>
  <attribute arch="lifesave" editor="save life" type="bool">
    An item with this flag enabled will save the players life
    for one time: When the player is wearing this item and his
    health points reach zero, the item disappears, replenishing
    half of the player's health.

    An item with &lt;save life&gt; should not have
    any decent additional bonuses!
  </attribute>
  <attribute arch="unique" editor="unique item" type="bool">
    Unique items exist only one time on a server. If the item
    is taken, lost or destroyed - it's gone for good.
  </attribute>
  <attribute arch="startequip" editor="godgiven item" type="bool">
    A godgiven item vanishes as soon as the player
    drops it to the ground.
  </attribute>
  &player_stat_resist_sections;
<section name="misc">
  <attribute arch="luck" editor="luck bonus" type="int">
    With positive luck bonus, the player is more likely to
    succeed in all sorts of things (spellcasting, praying,...).
    Unless the &lt;luck bonus&gt; is very high, the effect will be
    barely visible in-game. Luck bonus on one piece of equipment
    should never exceed 3, and such bonus should not be too
    frequently available.
  </attribute>
  <attribute arch="hp" editor="health regen." type="int">
    Positive &lt;health regen.&gt; bonus speeds up the
    player's healing process. Negative values slow it down.
  </attribute>
  <attribute arch="sp" editor="mana regen." type="int">
    Positive &lt;mana regen.&gt; bonus speeds up the
    player's mana regeneration. Negative values slow it down.
  </attribute>
  <attribute arch="grace" editor="grace regen." type="int">
    Positive &lt;grace regen.&gt; bonus speeds up the
    player's grace regeneration. Negative values slow it down.
    Since grace can be regenerated rather easy with praying,
    additional &lt;grace regen.&gt; bonus should be VERY RARE!!
  </attribute>
  <attribute arch="food" editor="food bonus" type="int">
    Positive &lt;food bonus&gt; slows down the player's digestion,
    thus he consumes less food. Negative values speed it up.

    Note that food is consumed not only for "being alive", but
    also for healing and mana-regeneration.
    &lt;food bonus&gt; only affects the amount of food consumed
    for "being alive". Hence, even with high &lt;food bonus&gt;,
    during a fight a player can run out of food quickly.
  </attribute>
  <attribute arch="xrays" editor="xray vision" type="bool">
    Xray vision allows the player to see through obstacles
    in a two-square-wide radius. This is extremely helpful and
    desirable, so don't give it away for cheap on equipment.
  </attribute>
  <attribute arch="stealth" editor="stealth" type="bool">
    Stealth allows the player to move silently.
    This comes to effect if a player turns himself
    invisible and tries to sneak around monsters.
    (At least that was the idea behind it)
  </attribute>
  <attribute arch="reflect_spell" editor="reflect spells" type="bool">
    If a player is wearing any piece of equipment with
    the ability to &lt;reflect spells&gt;, all kinds of
    spell-bullets and -beams will bounce off him.
    This works only about 90% of all times, to
    avoid players being completely immune to certain
    types of attacks.

    This is a very powerful ability and it
    shouldn't be handed out cheap!
  </attribute>
  <attribute arch="reflect_missile" editor="reflect missiles" type="bool">
    If a player is wearing any piece of equipment with
    the ability to &lt;reflect missiles&gt;, all kinds of
    projectiles (e.g. arrows, bolts, boulders) will
    bounce off him. This works only about 90% of all
    times, to avoid players being completely immune to
    certain types of attacks.
  </attribute>
  <attribute arch="path_attuned" editor="attuned paths" type="bitmask_spellpath">
    Click on the &lt;attuned paths&gt; button to select spellpaths.
    The player will get attuned to the specified spellpaths
    while wearing this weapon.
  </attribute>
  <attribute arch="path_repelled" editor="repelled paths" type="bitmask_spellpath">
    Click on the &lt;repelled paths&gt; button to select spellpaths.
    The player will get repelled to the specified spellpaths
    while wearing this weapon.
  </attribute>
  <attribute arch="path_denied" editor="denied paths" type="bitmask_spellpath">
    Click on the &lt;denied paths&gt; button to select spellpaths.
    The specified spellpaths will be denied to the player
    while wearing this weapon.
  </attribute>
</section>
  <attribute arch_begin="msg" arch_end="endmsg" editor="description" type="text">
    This text describes the weapons's "story". Every decent artifact weapon
    should have such a description.
  </attribute>
</type>

<type number="116" name="Event Connector">
  <description><![CDATA[
    Event connectors link specific events that happen to objects to
    a crossfire plug-in. ]]>
  </description>
  <attribute arch="subtype" editor="event type" type="list_event_type">
    The type of event that triggers a notify to the plug-in.
  </attribute>
  <attribute arch="title" editor="plug-in" type="string">
    The name of the plug-in that should be notified of the event, e.g. "cfpython"
    for python and "perl" for the Crossfire-Perl plug-in.
  </attribute>
  <attribute arch="slaying" editor="extension" type="string">
    The name of the extension to invoke (for python, this is the path to a script,
    for perl this is the name of a extension package without the ".ext" extension.
  </attribute>
  <attribute arch="name" editor="options" type="string">
    A string that is passed unaltered to the extension above. Often used to pass
    options to the extension that alter its behaviour.
  </attribute>
</type>

</types>
